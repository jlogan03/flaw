//! Butterworth filter of order 3.
//! Region of validity: cutoff ratio from 1.00e-02 to 4.00e-01 .
//! This file is autogenerated.
#![allow(clippy::style)]

use crate::{SisoIirFilter, StagedSisoIirFilter};

/// Minimum tabulated cutoff ratio
#[allow(dead_code)]
pub const MIN_CUTOFF_RATIO: f64 = 0.01;

/// Maximum tabulated cutoff ratio
#[allow(dead_code)]
pub const MAX_CUTOFF_RATIO: f64 = 0.4;

/// Initialise a Butterworth filter of order 3 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 1.00e-02 to 4.00e-01
pub fn butter3(cutoff_ratio: f64) -> Result<SisoIirFilter<3>, &'static str> {
    let avals = &[&AVALS[0][..], &AVALS[1][..], &AVALS[2][..]];
    let cvals = &[&CVALS[0][..], &CVALS[1][..], &CVALS[2][..]];
    SisoIirFilter::new_interpolated(cutoff_ratio, &LOG10_CUTOFF_RATIOS, avals, cvals, &DVALS)
}

/// Initialise a two-stage Butterworth filter of combined order 2*3 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 8.45e-03 to 3.81e-01
pub fn butter3_2stage(cutoff_ratio: f64) -> Result<StagedSisoIirFilter<3, 2>, &'static str> {
    // Look up the per-stage cutoff ratio corresponding to the desired combined cutoff
    let log10_root_cutoff_ratio = libm::log10(cutoff_ratio);

    if log10_root_cutoff_ratio < LOG10_ROOT2_CUTOFF_RATIOS[0]
        || log10_root_cutoff_ratio > *LOG10_ROOT2_CUTOFF_RATIOS.last().ok_or("Table size error")?
    {
        return Err("Selected cutoff ratio is outside the grid");
    }

    let log10_cutoff_ratio = interpn::MulticubicRectilinear::<'_, _, 3>::new(
        &[&LOG10_ROOT2_CUTOFF_RATIOS],
        &LOG10_CUTOFF_RATIOS,
        true,
    )?
    .interp_one(&[log10_root_cutoff_ratio])?;
    let cutoff_ratio = libm::pow(10.0, log10_cutoff_ratio);
    let filt = butter3(cutoff_ratio)?;
    Ok(StagedSisoIirFilter::new([filt, filt]))
}

/// [dimensionless] Log base-10 of cutoff ratios, to improve float precision during interpolation
#[rustfmt::skip]
static LOG10_CUTOFF_RATIOS: [f64; 30] = [-2.0, -1.9447565520231738, -1.8895131040463473, -1.834269656069521, -1.7790262080926948, -1.7237827601158684, -1.6685393121390422, -1.613295864162216, -1.5580524161853897, -1.5028089682085635, -1.447565520231737, -1.3923220722549108, -1.3370786242780843, -1.281835176301258, -1.2265917283244319, -1.1713482803476056, -1.1161048323707794, -1.060861384393953, -1.0056179364171267, -0.9503744884403005, -0.895131040463474, -0.8398875924866478, -0.7846441445098216, -0.7294006965329953, -0.6741572485561689, -0.6189138005793426, -0.5636703526025164, -0.50842690462569, -0.4531834566488637, -0.3979400086720376];

/// [dimensionless] Log base-10 of root cutoff ratios, used to generate multi-stage filters
#[rustfmt::skip]
static LOG10_ROOT2_CUTOFF_RATIOS: [f64; 30] = [-2.0733422786969182, -2.008405075900231, -1.9535026472748653, -1.8981499789098817, -1.842883623593902, -1.787610634295923, -1.7323290906231552, -1.6770365168201815, -1.6217297215392714, -1.5664045916392453, -1.5110558270201684, -1.455676599963256, -1.4002581180791474, -1.3447890646860163, -1.2892548842942173, -1.2336368742994157, -1.177911038282043, -1.1220466549828776, -1.0660045288779434, -1.0097349354613303, -0.9531754128771844, -0.8962489242564043, -0.8388660185862463, -0.7809429412499237, -0.7223829363629709, -0.6630929262848985, -0.6030075525871643, -0.5421272015953945, -0.4806106375191916, -0.4196216537308382];

/// State-Space `D` 1x1 matrix
#[rustfmt::skip]
static DVALS: [f64; 30] = [2.914649446569766e-05, 4.2338682858060855e-05, 6.143577001205006e-05, 8.903896551123979e-05, 0.0001288692255607808, 0.00018623325941637787, 0.00026867390263146125, 0.00038687226706058314, 0.0005558906773383656, 0.0007968723631531099, 0.0011393468217128448, 0.0016243291627185158, 0.0023084479680542426, 0.0032693898613086153, 0.0046130119247308225, 0.006482550500071994, 0.009070459447018732, 0.01263357037825838, 0.01751253778694404, 0.024157020150738714, 0.03315895048679317, 0.045297922565416746, 0.061605812770686344, 0.08346349690899205, 0.11275331951622508, 0.15211185815845985, 0.20536959098475677, 0.27835322319531114, 0.38042659162776477, 0.5276243825019432];

/// State-Space `A` matrix, first row
#[rustfmt::skip]
static AVALS: [[f64; 30]; 3] = [[2.874356892677484, 2.8573205001252853, 2.8379762820613337, 2.816012617271835, 2.791076262870658, 2.762766997533273, 2.7306316624504596, 2.694157568299091, 2.6527652496360155, 2.605800566996535, 2.5525261816141054, 2.4921124562274803, 2.423627862513471, 2.3460289896646356, 2.2581502277744443, 2.1586931067975286, 2.046215047646284, 1.9191168377642644, 1.7756273541868806, 1.613782756146727, 1.4313953470419352, 1.2260043114681722, 0.994796283682259, 0.7344779148883946, 0.4410751364987645, 0.10962527518039783, -0.2662777372130093, -0.6951128798916075, -1.1881782474735982, -1.7600418803431688], [-2.7564831952256954, -2.724638703341649, -2.688813538101342, -2.648563449780456, -2.603410471407148, -2.5528454663466507, -2.4963328133274927, -2.433317911119573, -2.363238334590469, -2.2855396373018553, -2.1996969660713113, -2.1052438189148113, -2.001809424720844, -1.8891663349212262, -1.7672898839021887, -1.636431205376324, -1.4972055425197437, -1.3506978097209459, -1.1985880727280136, -1.0433014251211858, -0.8881907607819894, -0.7377691213979382, -0.5980240556046247, -0.4768759327877078, -0.3848970644739995, -0.3365119988410647, -0.3520997636267055, -0.46181906772902137, -0.7127922063168955, -1.1828932620378303], [0.8818931305924855, 0.8669794937534993, 0.8503457698799116, 0.8318385207845312, 0.8113032547320039, 0.7885886027380468, 0.7635517596559812, 0.7360653646839969, 0.7060259595357464, 0.6733640914000955, 0.6380560098835034, 0.6001367293855826, 0.5597139784629389, 0.5169822263661216, 0.4722355607298978, 0.4258776945782197, 0.37842681929731004, 0.3305124089306146, 0.2828604162455806, 0.236262507768549, 0.1915238098457091, 0.14938142940643206, 0.11038126975687512, 0.07469004262737683, 0.0417953718454343, 0.009991858392987774, -0.02457922703833934, -0.06989383794185987, -0.14244227923162425, -0.2780599176345463]];

/// State-Space `C` vector
#[rustfmt::skip]
static CVALS: [[f64; 30]; 3] = [[0.00017121691066195722, 0.00024799123505282283, 0.0003586605682005232, 0.0005178517468422024, 0.0007462915131595623, 0.0010732188812077551, 0.0015396711732939838, 0.0022029116474480467, 0.00314231950345494, 0.004467107545187572, 0.006326253057499389, 0.008920998427579915, 0.012520162718701596, 0.0174782529770715, 0.0242559097027496, 0.03344148857918827, 0.045771488950611325, 0.06214600876877065, 0.08363335449656133, 0.11145524301136729, 0.14694041889996917, 0.19142921606200256, 0.24610267190956286, 0.31169258590598664, 0.38799264434498304, 0.47301087878420234, 0.561423422974488, 0.6415727589835292, 0.6892651739506626, 0.6542321372122061], [7.097661202658655e-06, 1.1658434610602351e-05, 1.9117979904069535e-05, 3.1291546874387025e-05, 5.110818541527597e-05, 8.32750462650737e-05, 0.00013532222867071128, 0.0002192335844277977, 0.0003539698734876099, 0.0005693337176024989, 0.0009118227181137985, 0.0014533785584593217, 0.0023042710052340633, 0.0036317483222088323, 0.00568650646529552, 0.008839403571470278, 0.013631036183779184, 0.020836575295906126, 0.03154729444620235, 0.04726800690226924, 0.07002537800078236, 0.10247435916401088, 0.14797568031011402, 0.21058875778477662, 0.2948615368571813, 0.4051481090390477, 0.5437981885124242, 0.7065108435505065, 0.8701146652953233, 0.95874982055741], [5.4850587715848324e-05, 7.904545268853241e-05, 0.00011367741716111196, 0.0001631050068742944, 0.00023342124769303501, 0.0003330946852428915, 0.0004738203337593533, 0.0006716355434006559, 0.0009483639262031612, 0.0013334575979295506, 0.0018663139086483938, 0.0025991487538780276, 0.00360051856432857, 0.0049596063106667684, 0.006791440197659787, 0.00924332416202954, 0.01250296456511927, 0.016809122157371015, 0.02246614151487549, 0.029864418311767615, 0.039509679014509025, 0.052064590987380574, 0.06840594060871902, 0.08969738905095459, 0.11746588643221277, 0.15363173830507343, 0.20032176518117153, 0.25889804812270373, 0.3262377608359876, 0.3809131901614745]];

#[cfg(feature = "std")]
#[cfg(test)]
#[rustfmt::skip]
mod test {
    use super::*;
    static CUTOFF_TEST_INPUT: [f32; 101] = [0.0, 0.5877852522924732, -0.9510565162951536, 0.9510565162951535, -0.5877852522924728, -4.898587196589413e-16, 0.5877852522924736, -0.9510565162951538, 0.9510565162951533, -0.5877852522924725, -9.797174393178826e-16, 0.587785252292474, -0.951056516295154, 0.9510565162951532, -0.587785252292472, -1.4695761589768238e-15, 0.5877852522924744, -0.9510565162951541, 0.951056516295153, -0.5877852522924716, -1.959434878635765e-15, 0.5877852522924748, -0.9510565162951542, 0.9510565162951529, -0.5877852522924712, -2.4492935982947065e-15, 0.5877852522924751, -0.9510565162951544, 0.9510565162951528, -0.5877852522924708, -2.9391523179536475e-15, 0.5877852522924756, -0.9510565162951545, 0.9510565162951525, -0.5877852522924705, -3.429011037612589e-15, 0.587785252292476, -0.9510565162951546, 0.9510565162951524, -0.58778525229247, -3.91886975727153e-15, 0.5877852522924764, -0.9510565162951549, 0.9510565162951523, -0.5877852522924697, -4.408728476930472e-15, 0.5877852522924768, -0.951056516295155, 0.9510565162951521, -0.5877852522924693, -4.898587196589413e-15, 0.5877852522924887, -0.9510565162951552, 0.9510565162951563, -0.5877852522924688, -1.9599300631450357e-14, 0.5877852522924776, -0.9510565162951509, 0.9510565162951519, -0.5877852522924569, -5.878304635907295e-15, 0.5877852522924665, -0.9510565162951554, 0.9510565162951473, -0.587785252292468, 7.842691359635767e-15, 0.5877852522924784, -0.95105651629516, 0.9510565162951515, -0.5877852522924791, -6.858022075225178e-15, 0.5877852522924902, -0.9510565162951558, 0.9510565162951558, -0.5877852522924673, -2.1558735510086122e-14, 0.5877852522924791, -0.9510565162951515, 0.9510565162951512, -0.5877852522924554, -7.83773951454306e-15, 0.587785252292468, -0.9510565162951561, 0.9510565162951466, -0.5877852522924665, 5.883256481000002e-15, 0.5877852522924799, -0.9510565162951606, 0.9510565162951509, -0.5877852522924776, -8.817456953860943e-15, 0.5877852522924918, -0.9510565162951563, 0.9510565162951552, -0.5877852522924657, -2.3518170388721888e-14, 0.5877852522924807, -0.9510565162951521, 0.9510565162951506, -0.5877852522924538, -9.797174393178826e-15];
    static CUTOFF_TEST_OUTPUT: [f32; 101] = [0.0, 0.3101298307845651, -0.11725260530555925, -0.23369271319052687, 0.46377160391470734, -0.4340089382940304, 0.1618031245926851, 0.21810873356737748, -0.5278075636855183, 0.6259731020226966, -0.4648344393675269, 0.10597178936395257, 0.30773576412009673, -0.610941044526917, 0.6817967559001232, -0.48967005850185497, 0.10676618396611481, 0.3201931622840898, -0.6269004808270583, 0.694929370526684, -0.497369603685071, 0.10922090413658292, 0.321328838356138, -0.6296620553267335, 0.6977639144399003, -0.49940765781077506, 0.11022288503425465, 0.32118793745885377, -0.6300325991367535, 0.6983041470601729, -0.4998809971795259, 0.11051997800171287, 0.3210747343058298, -0.6300531694099604, 0.6983916492033988, -0.4999791949192443, 0.11059502420900841, 0.32103447644394867, -0.6300437806845715, 0.6984018780648553, -0.4999971099060372, 0.1106118450565477, 0.3210232183286109, -0.6300388817575457, 0.6984018956934164, -0.49999980541019046, 0.1106152062087935, 0.321020486151796, -0.6300372993846087, 0.6984014079226051, -0.5000000589825586, 0.11061578949310608, 0.3210198951255534, -0.6300368786084206, 0.6984012042718764, -0.5000000339413577, 0.1106158693156, 0.3210197816406205, -0.6300367802546505, 0.6984011432102492, -0.5000000112567159, 0.11061587427085792, 0.32101976306444613, -0.6300367597290583, 0.6984011276800932, -0.5000000030373056, 0.11061587246753335, 0.3210197608340353, -0.6300367559557684, 0.6984011241787145, -0.5000000007179657, 0.11061587147792096, 0.32101976080584704, -0.6300367553804455, 0.6984011234746634, -0.5000000001514937, 0.11061587115374286, 0.3210197609020764, -0.6300367553238778, 0.6984011233514149, -0.5000000000282209, 0.11061587106686951, 0.3210197609434359, -0.6300367553282086, 0.6984011233342424, -0.5000000000043936, 0.11061587104645901, 0.32101976095598117, -0.6300367553327507, 0.6984011233330709, -0.5000000000004703, 0.11061587104216891, 0.32101976095920937, -0.6300367553344273, 0.6984011233334227, -0.4999999999999836, 0.11061587104135492, 0.3210197609599367, -0.6300367553349002, 0.6984011233336223, -0.4999999999999552];
    const STEP_TEST_MIN_OUTPUT: f32 = 0.9999999999989908;
    const STEP_TEST_MAX_OUTPUT: f32 = 1.0004210129865183;

    #[test]
    fn test() {
        let order = 3;
        println!("order {order}");
        let mut filter = butter3(0.4).unwrap();
        let out = (0..CUTOFF_TEST_INPUT.len()).map(|i| {filter.update(CUTOFF_TEST_INPUT[i])}).collect::<Vec<f32>>();

        // Check overall match to reference output to catch phase error, etc
        (0..CUTOFF_TEST_INPUT.len()).for_each(|i| { let expected = CUTOFF_TEST_OUTPUT[i]; let rel_err = (out[i] - expected).abs() / expected.abs().max(1e-4); assert!(rel_err < 0.05); });
        // Check approximate attenuation at cutoff frequency; should be -3dB or 1/sqrt(2) magnitude
        let maxmag = out.iter().fold(0.0_f32, |a, b| a.abs().max(b.abs()));
        let attenuation_rel_err = (maxmag - (libm::sqrtf(2.0) / 2.0)).abs() / (libm::sqrtf(2.0) / 2.0);
        println!("order {order} attenuation rel err {attenuation_rel_err}");
        assert!(attenuation_rel_err < 0.05);

        // Check convergence of step responses at min and max tabulated cutoff
        let mut filtermin = butter3(MIN_CUTOFF_RATIO).unwrap();
        (0..999).for_each(|_| {filtermin.update(1.0);});
        let step_min_final = filtermin.update(1.0);
        let step_min_rel_err = (step_min_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
        println!("order {order} step min rel err {step_min_rel_err}");
        assert!(step_min_rel_err < 1e-4);


    // Check response of staged filter
    let freq = 0.17;
    let mut filter_2stage = butter3_2stage(freq).unwrap();
    let mut maxmag_2stage = 0.0;
    for i in 0..99999 {
        let u = libm::sin((i as f64) * 2.0 * core::f64::consts::PI * freq) as f32;
        let v = filter_2stage.update(u);
        maxmag_2stage = v.abs().max(maxmag_2stage);
    }
    let attenuation_2stage_rel_err = (maxmag_2stage - (libm::sqrtf(2.0) / 2.0)).abs() / (libm::sqrtf(2.0) / 2.0);
    println!("order {order} attenuation 2stage rel err {attenuation_2stage_rel_err}");
    assert!(attenuation_2stage_rel_err < 0.05);

    let mut filtermin_2stage = butter3_2stage(MIN_CUTOFF_RATIO).unwrap();
    (0..99999).for_each(|_| {filtermin_2stage.update(1.0);});
    let step_min_2stage_final = filtermin_2stage.update(1.0);
    let step_min_2stage_rel_err = (step_min_2stage_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
    println!("order {order} step min 2stage rel err {step_min_2stage_rel_err}");
    assert!(step_min_2stage_rel_err < 2e-4);  // 1e-4 per stage
    


                let mut filtermax = butter3(MAX_CUTOFF_RATIO).unwrap();
        (0..19).for_each(|_| {filtermax.update(1.0);});
        let step_max_final = filtermax.update(1.0);
        let step_max_rel_err = (step_max_final - STEP_TEST_MAX_OUTPUT).abs() / STEP_TEST_MAX_OUTPUT;
        println!("order {order} step max rel err {step_max_rel_err}");
        assert!(step_max_rel_err < 1e-6);
    }
}
