//! Butterworth filter of order 3.
//! Region of validity: cutoff ratio from 1.00e-02 to 4.00e-01 .
//! This file is autogenerated.
#![allow(clippy::style)]

use crate::{SisoIirFilter, StagedSisoIirFilter};

/// Minimum tabulated cutoff ratio
#[allow(dead_code)]
pub const MIN_CUTOFF_RATIO: f64 = 0.01;

/// Maximum tabulated cutoff ratio
#[allow(dead_code)]
pub const MAX_CUTOFF_RATIO: f64 = 0.4;

/// Initialise a Butterworth filter of order 3 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 1.00e-02 to 4.00e-01
pub fn butter3(cutoff_ratio: f64) -> Result<SisoIirFilter<3>, &'static str> {
    let avals = &[&AVALS[0][..], &AVALS[1][..], &AVALS[2][..]];
    let cvals = &[&CVALS[0][..], &CVALS[1][..], &CVALS[2][..]];
    SisoIirFilter::new_interpolated(cutoff_ratio, &LOG10_CUTOFF_RATIOS, avals, cvals, &DVALS)
}

/// Initialise a two-stage Butterworth filter of combined order 2*3 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 8.52e-03 to 3.84e-01
pub fn butter3_2stage(cutoff_ratio: f64) -> Result<StagedSisoIirFilter<3, 2>, &'static str> {
    // Look up the per-stage cutoff ratio corresponding to the desired combined cutoff
    let log10_root_cutoff_ratio = libm::log10(cutoff_ratio);

    if log10_root_cutoff_ratio < LOG10_ROOT2_CUTOFF_RATIOS[0]
        || log10_root_cutoff_ratio > *LOG10_ROOT2_CUTOFF_RATIOS.last().ok_or("Table size error")?
    {
        return Err("Selected cutoff ratio is outside the grid");
    }

    let log10_cutoff_ratio = interpn::MulticubicRectilinear::<'_, _, 3>::new(
        &[&LOG10_ROOT2_CUTOFF_RATIOS],
        &LOG10_CUTOFF_RATIOS,
        true,
    )?
    .interp_one(&[log10_root_cutoff_ratio])?;
    let cutoff_ratio = libm::pow(10.0, log10_cutoff_ratio);
    let filt = butter3(cutoff_ratio)?;
    Ok(StagedSisoIirFilter::new([filt, filt]))
}

/// [dimensionless] Log base-10 of cutoff ratios, to improve float precision during interpolation
#[rustfmt::skip]
static LOG10_CUTOFF_RATIOS: [f64; 50] = [-2.0, -1.967304898136164, -1.934609796272328, -1.9019146944084921, -1.8692195925446562, -1.8365244906808202, -1.8038293888169843, -1.7711342869531481, -1.7384391850893122, -1.7057440832254762, -1.6730489813616403, -1.6403538794978043, -1.6076587776339684, -1.5749636757701324, -1.5422685739062965, -1.5095734720424603, -1.4768783701786243, -1.4441832683147884, -1.4114881664509524, -1.3787930645871165, -1.3460979627232805, -1.3134028608594446, -1.2807077589956086, -1.2480126571317727, -1.2153175552679367, -1.1826224534041008, -1.1499273515402648, -1.1172322496764289, -1.084537147812593, -1.051842045948757, -1.0191469440849208, -0.9864518422210848, -0.9537567403572489, -0.9210616384934129, -0.888366536629577, -0.855671434765741, -0.8229763329019051, -0.7902812310380691, -0.757586129174233, -0.724891027310397, -0.6921959254465611, -0.6595008235827251, -0.6268057217188892, -0.5941106198550532, -0.5614155179912172, -0.5287204161273813, -0.49602531426354535, -0.4633302123997094, -0.43063511053587344, -0.3979400086720376];

/// [dimensionless] Log base-10 of root cutoff ratios, used to generate multi-stage filters
#[rustfmt::skip]
static LOG10_ROOT2_CUTOFF_RATIOS: [f64; 50] = [-2.0694297428529924, -2.031181969445286, -1.9983892397492755, -1.965643794209963, -1.9329393724118933, -1.9002334369479346, -1.867525742126651, -1.8348160024238869, -1.802103886044969, -1.7693890074532919, -1.7366709186927298, -1.7039490993307664, -1.6712229447868034, -1.6384917528051908, -1.605754707783983, -1.5730108626241854, -1.5402591177222968, -1.5074981966769117, -1.474726618216283, -1.4419426637923158, -1.4091443402166548, -1.3763293366353373, -1.3434949750671747, -1.3106381536441383, -1.2777552816205195, -1.2448422051432593, -1.2118941227201876, -1.1789054892852624, -1.1458699077548233, -1.112780007003401, -1.079627305275531, -1.0464020581931208, -1.0130930907147577, -0.9796876126280718, -0.9461710173559368, -0.9125266639456799, -0.8787356420120799, -0.8447765192412955, -0.810625071797658, -0.7762540033675026, -0.7416326808436785, -0.7067269904276295, -0.6714996517844447, -0.6359120038629275, -0.5999300944942985, -0.5635421782846222, -0.526798881564242, -0.4897924406757059, -0.4526045068973029, -0.415502589352938];

/// State-Space `D` 1x1 matrix
#[rustfmt::skip]
static DVALS: [f64; 50] = [2.914649446569766e-05, 3.63585521352098e-05, 4.533890721120597e-05, 5.651561495851052e-05, 7.041850428034876e-05, 8.770276349682289e-05, 0.00010917779247274215, 0.00013584243311549958, 0.00016892790512898544, 0.0002099500242567735, 0.00026077257018056665, 0.0003236840048449735, 0.00040149012318069666, 0.0004976256505931735, 0.0006162882882879816, 0.0007625992510368539, 0.0009427949442632245, 0.0011644550898465057, 0.0014367733344367746, 0.0017708771631687063, 0.002180204801409468, 0.0026809477297375884, 0.0032925684859397048, 0.004038404623871881, 0.0049463711126393455, 0.006049775204133645, 0.007388260049771299, 0.009008896377445282, 0.01096744574659281, 0.013329824864750704, 0.016173809009140786, 0.019591024942094536, 0.023689301526276803, 0.028595471924977137, 0.034458758217867966, 0.04145492236645092, 0.049791443855705074, 0.05971409458427038, 0.07151544162855061, 0.0855460429405216, 0.10222944847207435, 0.12208264154041706, 0.1457443535684364, 0.17401492797472376, 0.20791338147958147, 0.24876050703357752, 0.2983021518632558, 0.35889575079476205, 0.4337986732494125, 0.5276243825019432];

/// State-Space `A` matrix, first row
#[rustfmt::skip]
static AVALS: [[f64; 50]; 3] = [[2.874356892677484, 2.864536514560965, 2.853949191621625, 2.842535184050612, 2.8302301376007595, 2.8169647366982953, 2.8026643337758586, 2.787248553739743, 2.770630872564467, 2.7527181691241354, 2.7334102495285637, 2.7125993434385167, 2.6901695720933008, 2.6659963880981112, 2.639945987387131, 2.611874694194964, 2.581628320318807, 2.5490415004095266, 2.5139370054472265, 2.47612503686793, 2.4354025039132816, 2.3915522865342798, 2.3443424854005745, 2.293525658991528, 2.2388380450380305, 2.1799987593161667, 2.116708958428805, 2.048650944093046, 1.9754871737937139, 1.8968591255430227, 1.8123859418427992, 1.7216627485812597, 1.624258507185414, 1.5197132114485759, 1.4075341825139742, 1.287191144905265, 1.158109681653163, 1.0196625661099472, 0.8711583513934962, 0.7118264670811107, 0.5407979333679137, 0.3570806735618848, 0.1595283301065297, -0.05319843433118937, -0.28267872631059887, -0.5307856096740121, -0.7997439439638252, -1.0921812848174461, -1.4111466286045107, -1.7600418803431688], [-2.7564831952256954, -2.738093247662837, -2.7183696740059418, -2.697224771856135, -2.6745665778215617, -2.650298931014868, -2.62432159938585, -2.5965304815025254, -2.5668178982004166, -2.5350729904969556, -2.5011822423112253, -2.4650301488270707, -2.4265000537696086, -2.385475181400366, -2.34183989163131, -2.295481189256257, -2.246290520829173, -2.194165895099777, -2.1390143650566618, -2.0807549114349504, -2.019321768940676, -1.9546682373831714, -1.8867710204124442, -1.8156351347673267, -1.741299433168662, -1.6638427848280992, -1.5833909599687541, -1.5001242703081188, -1.4142860284466174, -1.326191908902513, -1.2362403269293452, -1.1449240049719114, -1.052842980012477, -0.9607194310926206, -0.86941489298618, -0.7799506946086876, -0.6935328551848483, -0.6115832393816747, -0.5357795910982703, -0.46810824943526413, -0.41093507555731434, -0.3671026589625926, -0.3400656548037396, -0.33408180637340495, -0.3544848911041587, -0.40807913496099024, -0.5037149853038501, -0.6531366612354725, -0.8722352251943872, -1.1828932620378303], [0.8818931305924855, 0.8732658646847902, 0.8640577711266276, 0.8542374628858547, 0.8437730921865597, 0.8326325722085983, 0.8207838432702091, 0.8081951882978585, 0.7948356023949177, 0.7806752211787658, 0.7656858122212172, 0.7498413333497941, 0.7331185606908623, 0.7154977880975093, 0.6969635979378749, 0.6775057010529983, 0.6571198409562602, 0.6358087539714785, 0.6135831729339412, 0.5904628572616706, 0.5664776266161186, 0.541668369010991, 0.516087987124352, 0.48980223878482354, 0.4628904192295166, 0.43544582387886355, 0.40757592114177893, 0.37940215519551046, 0.3510592886801612, 0.32269418444148457, 0.2944639130134196, 0.2665330568538955, 0.23907006061684866, 0.21224244424422747, 0.18621064472926202, 0.16112017077181506, 0.1370916226860449, 0.11420791659756468, 0.09249770667636932, 0.07191343882998068, 0.05230155441280586, 0.0333608530773713, 0.014582496149718729, -0.004839183093195763, -0.026143434421893836, -0.05121931163361794, -0.08295828563837142, -0.1258480603051777, -0.1870075321964028, -0.2780599176345463]];

/// State-Space `C` vector
#[rustfmt::skip]
static CVALS: [[f64; 50]; 3] = [[0.00017121691066195722, 0.00021322605661350643, 0.000265411659218047, 0.0003301944688433548, 0.00041055608590005743, 0.0005101638825720093, 0.0006335220824219632, 0.0007861539245841626, 0.0009748205845749648, 0.0012077833191499938, 0.0014951161266691677, 0.0018490770335589453, 0.0022845468824187914, 0.002819545138885894, 0.003475832658603485, 0.004279611438705753, 0.005262330961153005, 0.006461609618921364, 0.007922277657190736, 0.009697544770445807, 0.011850290636624782, 0.014454469862345581, 0.01759661364549861, 0.021377398497855832, 0.025913237169772098, 0.031337828051553995, 0.03780357638386645, 0.04548277320122554, 0.054568385641450945, 0.06527427453084478, 0.07783461110163954, 0.09250221267561409, 0.10954545411216593, 0.12924333224692602, 0.15187815473223737, 0.1777251760821836, 0.20703828475989716, 0.24003051066954037, 0.2768475991139578, 0.31753206634068526, 0.36197381987926247, 0.4098412764927175, 0.4604834140525375, 0.5127874622056613, 0.5649674545791666, 0.6142430237120987, 0.6563411161657513, 0.6847080301657409, 0.6892424844992193, 0.6542321372122061], [7.097661202658655e-06, 9.52255030941423e-06, 1.2768811218106304e-05, 1.7111528212753857e-05, 2.2916534832640925e-05, 3.066975014778917e-05, 4.1015738458743305e-05, 5.480828108063603e-05, 7.317654499637452e-05, 9.761143692279335e-05, 0.00013007798872420888, 0.00017316118389897322, 0.00023025456405616283, 0.00030580331266129497, 0.0004056163666059725, 0.0005372655174145536, 0.0007105934864055242, 0.0009383576250229677, 0.0012370412016197035, 0.0016278701346948412, 0.002138079387993282, 0.0028024798158101773, 0.0036653826558248016, 0.004782944548107026, 0.0062260001232372995, 0.008083450789171229, 0.010466275976607724, 0.013512225027839287, 0.017391231952625937, 0.02231156871153219, 0.028526712090269368, 0.03634284008807612, 0.046126789765491026, 0.058314190255342374, 0.07341731706517957, 0.09203197160469015, 0.11484232934609201, 0.14262214435021933, 0.1762298108126948, 0.21659332041456328, 0.2646786792841686, 0.32143106229858703, 0.3876704116751111, 0.46390956245043763, 0.5500379920458576, 0.6447675485780129, 0.7446471915478607, 0.842279279978597, 0.9230215362975098, 0.95874982055741], [5.4850587715848324e-05, 6.81092346042508e-05, 8.451434232143758e-05, 0.00010479337049410241, 0.00012983574338413113, 0.0001607269410569849, 0.00019878916057827675, 0.00024562963392612, 0.0003031978183634941, 0.00037385280587991736, 0.0004604424273842882, 0.0005663956506219297, 0.0006958299844185261, 0.0008536757028931733, 0.0010458187910601475, 0.001279264591233069, 0.0015623242080918408, 0.0019048258295775585, 0.0023183532757673694, 0.002816514352792742, 0.00341524204284897, 0.004133132313908267, 0.004991823528317402, 0.006016424249763312, 0.0072359989106337425, 0.00868412455217954, 0.010399536945191842, 0.01242689107898105, 0.01481766944902994, 0.017631281828229255, 0.02093641209830408, 0.024812680706811904, 0.029352704278134602, 0.03466464478065147, 0.040875345802186915, 0.04813414653746583, 0.05661743368976478, 0.06653391691824982, 0.0781304559711393, 0.0916979530666717, 0.10757620753392769, 0.1261554226081443, 0.14786967004319138, 0.1731728378773048, 0.20247781162543582, 0.2360191651016879, 0.273555516742443, 0.31372941670547083, 0.3526750538949662, 0.3809131901614745]];

#[cfg(feature = "std")]
#[cfg(test)]
#[rustfmt::skip]
mod test {
    use super::*;
    static CUTOFF_TEST_INPUT: [f32; 101] = [0.0, 0.5877852522924732, -0.9510565162951536, 0.9510565162951535, -0.5877852522924728, -4.898587196589413e-16, 0.5877852522924736, -0.9510565162951538, 0.9510565162951533, -0.5877852522924725, -9.797174393178826e-16, 0.587785252292474, -0.951056516295154, 0.9510565162951532, -0.587785252292472, -1.4695761589768238e-15, 0.5877852522924744, -0.9510565162951541, 0.951056516295153, -0.5877852522924716, -1.959434878635765e-15, 0.5877852522924748, -0.9510565162951542, 0.9510565162951529, -0.5877852522924712, -2.4492935982947065e-15, 0.5877852522924751, -0.9510565162951544, 0.9510565162951528, -0.5877852522924708, -2.9391523179536475e-15, 0.5877852522924756, -0.9510565162951545, 0.9510565162951525, -0.5877852522924705, -3.429011037612589e-15, 0.587785252292476, -0.9510565162951546, 0.9510565162951524, -0.58778525229247, -3.91886975727153e-15, 0.5877852522924764, -0.9510565162951549, 0.9510565162951523, -0.5877852522924697, -4.408728476930472e-15, 0.5877852522924768, -0.951056516295155, 0.9510565162951521, -0.5877852522924693, -4.898587196589413e-15, 0.5877852522924887, -0.9510565162951552, 0.9510565162951563, -0.5877852522924688, -1.9599300631450357e-14, 0.5877852522924776, -0.9510565162951509, 0.9510565162951519, -0.5877852522924569, -5.878304635907295e-15, 0.5877852522924665, -0.9510565162951554, 0.9510565162951473, -0.587785252292468, 7.842691359635767e-15, 0.5877852522924784, -0.95105651629516, 0.9510565162951515, -0.5877852522924791, -6.858022075225178e-15, 0.5877852522924902, -0.9510565162951558, 0.9510565162951558, -0.5877852522924673, -2.1558735510086122e-14, 0.5877852522924791, -0.9510565162951515, 0.9510565162951512, -0.5877852522924554, -7.83773951454306e-15, 0.587785252292468, -0.9510565162951561, 0.9510565162951466, -0.5877852522924665, 5.883256481000002e-15, 0.5877852522924799, -0.9510565162951606, 0.9510565162951509, -0.5877852522924776, -8.817456953860943e-15, 0.5877852522924918, -0.9510565162951563, 0.9510565162951552, -0.5877852522924657, -2.3518170388721888e-14, 0.5877852522924807, -0.9510565162951521, 0.9510565162951506, -0.5877852522924538, -9.797174393178826e-15];
    static CUTOFF_TEST_OUTPUT: [f32; 101] = [0.0, 0.3101298307845651, -0.11725260530555925, -0.23369271319052687, 0.46377160391470734, -0.4340089382940304, 0.1618031245926851, 0.21810873356737748, -0.5278075636855183, 0.6259731020226966, -0.4648344393675269, 0.10597178936395257, 0.30773576412009673, -0.610941044526917, 0.6817967559001232, -0.48967005850185497, 0.10676618396611481, 0.3201931622840898, -0.6269004808270583, 0.694929370526684, -0.497369603685071, 0.10922090413658292, 0.321328838356138, -0.6296620553267335, 0.6977639144399003, -0.49940765781077506, 0.11022288503425465, 0.32118793745885377, -0.6300325991367535, 0.6983041470601729, -0.4998809971795259, 0.11051997800171287, 0.3210747343058298, -0.6300531694099604, 0.6983916492033988, -0.4999791949192443, 0.11059502420900841, 0.32103447644394867, -0.6300437806845715, 0.6984018780648553, -0.4999971099060372, 0.1106118450565477, 0.3210232183286109, -0.6300388817575457, 0.6984018956934164, -0.49999980541019046, 0.1106152062087935, 0.321020486151796, -0.6300372993846087, 0.6984014079226051, -0.5000000589825586, 0.11061578949310608, 0.3210198951255534, -0.6300368786084206, 0.6984012042718764, -0.5000000339413577, 0.1106158693156, 0.3210197816406205, -0.6300367802546505, 0.6984011432102492, -0.5000000112567159, 0.11061587427085792, 0.32101976306444613, -0.6300367597290583, 0.6984011276800932, -0.5000000030373056, 0.11061587246753335, 0.3210197608340353, -0.6300367559557684, 0.6984011241787145, -0.5000000007179657, 0.11061587147792096, 0.32101976080584704, -0.6300367553804455, 0.6984011234746634, -0.5000000001514937, 0.11061587115374286, 0.3210197609020764, -0.6300367553238778, 0.6984011233514149, -0.5000000000282209, 0.11061587106686951, 0.3210197609434359, -0.6300367553282086, 0.6984011233342424, -0.5000000000043936, 0.11061587104645901, 0.32101976095598117, -0.6300367553327507, 0.6984011233330709, -0.5000000000004703, 0.11061587104216891, 0.32101976095920937, -0.6300367553344273, 0.6984011233334227, -0.4999999999999836, 0.11061587104135492, 0.3210197609599367, -0.6300367553349002, 0.6984011233336223, -0.4999999999999552];
    const STEP_TEST_MIN_OUTPUT: f32 = 0.9999999999989908;
    const STEP_TEST_MAX_OUTPUT: f32 = 1.1818565197141493;

    #[test]
    fn test() {
        let order = 3;
        println!("order {order}");
        let mut filter = butter3(0.4).unwrap();
        let out = (0..CUTOFF_TEST_INPUT.len()).map(|i| {filter.update(CUTOFF_TEST_INPUT[i])}).collect::<Vec<f32>>();

        // Check overall match to reference output to catch phase error, etc
        (0..CUTOFF_TEST_INPUT.len()).for_each(|i| { let expected = CUTOFF_TEST_OUTPUT[i]; let rel_err = (out[i] - expected).abs() / expected.abs().max(1e-4); assert!(rel_err < 0.05); });
        // Check approximate attenuation at cutoff frequency; should be -3dB or 1/sqrt(2) magnitude
        let maxmag = out.iter().fold(0.0_f32, |a, b| a.abs().max(b.abs()));
        let attenuation_rel_err = (maxmag - 0.707).abs() / 0.707;
        println!("order {order} attenuation rel err {attenuation_rel_err}");
        assert!(attenuation_rel_err < 0.05);

        // Check convergence of step responses at min and max tabulated cutoff
        let mut filtermin = butter3(MIN_CUTOFF_RATIO).unwrap();
        (0..999).for_each(|_| {filtermin.update(1.0);});
        let step_min_final = filtermin.update(1.0);
        let step_min_rel_err = (step_min_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
        println!("order {order} step min rel err {step_min_rel_err}");
        assert!(step_min_rel_err < 1e-4);


    // Check response of staged filter
    let mut filter_2stage = butter3_2stage(0.1).unwrap();
    let mut maxmag_2stage = 0.0;
    for i in 0..99999 {
        let u = libm::sinf((i as f32) * 2.0 * core::f32::consts::PI / 10.0);
        let v = filter_2stage.update(u);
        maxmag_2stage = v.abs().max(maxmag_2stage);
    }
    let attenuation_2stage_rel_err = (maxmag_2stage - 0.707).abs() / 0.707;
    println!("order {order} attenuation 2stage rel err {attenuation_rel_err}");
    assert!(attenuation_2stage_rel_err < 0.05);

    let mut filtermin_2stage = butter3_2stage(MIN_CUTOFF_RATIO).unwrap();
    (0..99999).for_each(|_| {filtermin_2stage.update(1.0);});
    let step_min_2stage_final = filtermin_2stage.update(1.0);
    let step_min_2stage_rel_err = (step_min_2stage_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
    println!("order {order} step min 2stage rel err {step_min_2stage_rel_err}");
    assert!(step_min_2stage_rel_err < 2e-4);  // 1e-4 per stage
    


                let mut filtermax = butter3(MAX_CUTOFF_RATIO).unwrap();
        (0..1).for_each(|_| {filtermax.update(1.0);});
        let step_max_final = filtermax.update(1.0);
        let step_max_rel_err = (step_max_final - STEP_TEST_MAX_OUTPUT).abs() / STEP_TEST_MAX_OUTPUT;
        println!("order {order} step max rel err {step_max_rel_err}");
        assert!(step_max_rel_err < 1e-6);
    }
}
