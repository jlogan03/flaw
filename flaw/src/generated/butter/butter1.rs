//! Butterworth filter of order 1.
//! Region of validity: cutoff ratio from 1.00e-05 to 4.00e-01 .
//! This file is autogenerated.
#![allow(clippy::style)]

use crate::SisoIirFilter;

/// Minimum tabulated cutoff ratio
#[allow(dead_code)]
pub const MIN_CUTOFF_RATIO: f64 = 1e-05;

/// Maximum tabulated cutoff ratio
#[allow(dead_code)]
pub const MAX_CUTOFF_RATIO: f64 = 0.4;

/// Initialise a Butterworth filter of order 1 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 1.00e-05 to 4.00e-01
pub fn butter1(cutoff_ratio: f64) -> Result<SisoIirFilter<1>, &'static str> {
    let avals = &[&AVALS[0][..]];
    let cvals = &[&CVALS[0][..]];
    SisoIirFilter::new_interpolated(cutoff_ratio, &LOG10_CUTOFF_RATIOS, avals, cvals, &DVALS)
}

/// [dimensionless] Log base-10 of cutoff ratios, to improve float precision during interpolation
#[rustfmt::skip]
const LOG10_CUTOFF_RATIOS: [f64; 100] = [-5.0, -4.953514545542141, -4.907029091084284, -4.860543636626425, -4.8140581821685675, -4.767572727710709, -4.72108727325285, -4.674601818794993, -4.628116364337134, -4.5816309098792765, -4.535145455421418, -4.488660000963559, -4.442174546505702, -4.395689092047843, -4.349203637589985, -4.302718183132127, -4.256232728674268, -4.209747274216411, -4.163261819758552, -4.116776365300694, -4.070290910842836, -4.023805456384977, -3.9773200019271195, -3.930834547469261, -3.8843490930114033, -3.8378636385535447, -3.7913781840956866, -3.7448927296378285, -3.6984072751799704, -3.6519218207221122, -3.6054363662642537, -3.5589509118063956, -3.5124654573485374, -3.4659800028906793, -3.419494548432821, -3.3730090939749626, -3.3265236395171045, -3.2800381850592464, -3.2335527306013883, -3.18706727614353, -3.1405818216856716, -3.094096367227814, -3.0476109127699553, -3.001125458312097, -2.954640003854239, -2.908154549396381, -2.8616690949385224, -2.8151836404806643, -2.768698186022806, -2.722212731564948, -2.67572727710709, -2.6292418226492313, -2.582756368191373, -2.536270913733515, -2.489785459275657, -2.443300004817799, -2.3968145503599407, -2.350329095902082, -2.303843641444224, -2.257358186986366, -2.210872732528508, -2.1643872780706497, -2.117901823612791, -2.071416369154933, -2.024930914697075, -1.9784454602392167, -1.9319600057813586, -1.8854745513235, -1.838989096865642, -1.7925036424077838, -1.7460181879499257, -1.6995327334920676, -1.653047279034209, -1.6065618245763509, -1.5600763701184928, -1.5135909156606346, -1.4671054612027765, -1.4206200067449184, -1.3741345522870598, -1.3276490978292017, -1.2811636433713436, -1.2346781889134855, -1.1881927344556273, -1.1417072799977688, -1.0952218255399107, -1.0487363710820525, -1.0022509166241944, -0.9557654621663358, -0.9092800077084782, -0.8627945532506196, -0.8163090987927619, -0.7698236443349034, -0.7233381898770448, -0.6768527354191871, -0.6303672809613285, -0.5838818265034709, -0.5373963720456123, -0.49091091758775374, -0.44442546312989606, -0.3979400086720376];

/// State-Space `D` 1x1 matrix
#[rustfmt::skip]
const DVALS: [f64; 100] = [3.141493961679791e-05, 3.496392197705444e-05, 3.8913821411297065e-05, 4.330992450237544e-05, 4.8202632402581735e-05, 5.3648038249979646e-05, 5.9708569722298735e-05, 6.645370406439024e-05, 7.396076374855172e-05, 8.231580184205388e-05, 9.161458717299352e-05, 0.00010196370051524695, 0.00011348175426811511, 0.0001263007494997493, 0.0001405675857705902, 0.00015644574087029676, 0.00017411713950705746, 0.00019378423210169324, 0.0002156723071823274, 0.00024003206347249437, 0.0002671424706424586, 0.0002973139508785243, 0.0003308919169491578, 0.0003682607063430747, 0.00040984795535908895, 0.00045612946177909207, 0.0005076345899951213, 0.0005649522782328834, 0.0006287377138630995, 0.0006997197497665188, 0.0007787091423675024, 0.0008666077003243773, 0.000964418442011541, 0.001073256869895679, 0.0011943634807398975, 0.001329117642301957, 0.0014790529798535807, 0.00164587442945078, 0.0018314771294250535, 0.002037967337011948, 0.002267685573322752, 0.0025232322168898236, 0.0028074957836133826, 0.0031236841488735097, 0.003475358985524035, 0.003866473709021249, 0.004301415237492245, 0.004785049889379045, 0.00532277375346938, 0.005920567874463794, 0.006585058600266198, 0.007323583433117613, 0.008144262713327187, 0.009056077439052838, 0.010068953485210357, 0.011193852425470212, 0.01244286907919086, 0.013829335795225236, 0.015367933341488213, 0.01707480808724085, 0.01896769493828075, 0.021066045207814972, 0.023391158272580922, 0.025966315471050803, 0.0288169142470953, 0.03197060003106046, 0.0354573927895355, 0.03930980458231708, 0.043562943868984585, 0.048254601752338, 0.05342531489596425, 0.05911839959780363, 0.0653799515609284, 0.07225880643342154, 0.07980645738973048, 0.08807692814119204, 0.09712660308867206, 0.10701402121293019, 0.11779964714036781, 0.1295456420840412, 0.14231566957429215, 0.15617478669475704, 0.17118949173460973, 0.1874280248752291, 0.2049610514430849, 0.22386290012613752, 0.24421358600465437, 0.2661019282812673, 0.28963018913235344, 0.31492083760752765, 0.34212632447961083, 0.37144321918548545, 0.40313285496483303, 0.4375520346893306, 0.4751999326262179, 0.5167922774134703, 0.5633838803174345, 0.6165819511759112, 0.6789419742767233, 0.7547627247472144];

/// State-Space `A` matrix, first row
#[rustfmt::skip]
const AVALS: [[f64; 100]; 1] = [[0.9999371701207664, 0.9999300721560457, 0.9999221723571775, 0.9999133801509954, 0.9999035947351947, 0.9998927039235, 0.9998805828605553, 0.9998670925918712, 0.999852078472503, 0.9998353683963159, 0.9998167708256541, 0.9997960725989695, 0.9997730364914638, 0.9997473985010006, 0.9997188648284587, 0.9996871085182596, 0.9996517657209859, 0.9996124315357966, 0.9995686553856354, 0.9995199358730551, 0.999465715058715, 0.9994053720982431, 0.9993382161661016, 0.9992634785873138, 0.9991803040892819, 0.9990877410764417, 0.9989847308200098, 0.9988700954435341, 0.9987425245722737, 0.9986005605004671, 0.9984425817152649, 0.9982667845993514, 0.9980711631159769, 0.9978534862602086, 0.9976112730385203, 0.9973417647153962, 0.997041894040293, 0.9967082511410983, 0.99633704574115, 0.9959240653259761, 0.9954646288533545, 0.9949535355662203, 0.9943850084327733, 0.9937526317022529, 0.9930492820289519, 0.9922670525819574, 0.9913971695250156, 0.990429900221242, 0.9893544524930613, 0.9881588642510724, 0.9868298827994677, 0.9853528331337648, 0.9837114745733455, 0.9818878451218942, 0.9798620930295794, 0.9776122951490596, 0.9751142618416182, 0.9723413284095497, 0.9692641333170234, 0.9658503838255184, 0.9620646101234386, 0.9578679095843702, 0.9532176834548383, 0.9480673690578982, 0.9423661715058093, 0.936058799937879, 0.9290852144209292, 0.9213803908353659, 0.9128741122620309, 0.9034907964953242, 0.8931493702080715, 0.881763200804393, 0.8692400968781433, 0.8554823871331568, 0.8403870852205391, 0.8238461437176159, 0.8057467938226558, 0.7859719575741396, 0.7644007057192643, 0.7409087158319174, 0.7153686608514157, 0.6876504266104859, 0.6576210165307803, 0.6251439502495417, 0.5900778971138303, 0.552274199747725, 0.5115728279906914, 0.4677961434374654, 0.42073962173529295, 0.3701583247849447, 0.3157473510407784, 0.25711356162902915, 0.19373429007033388, 0.12489593062133893, 0.04960013474756412, -0.03358455482694078, -0.12676776063486886, -0.2331639023518222, -0.3578839485534467, -0.5095254494944288]];

/// State-Space `C` vector
#[rustfmt::skip]
const CVALS: [[f64; 100]; 1] = [[6.282790543673356e-05, 6.992539900242884e-05, 7.782461425160048e-05, 8.661609750563009e-05, 9.640061781762239e-05, 0.00010729032027594315, 0.0001194100092180009, 0.00013289857593921272, 0.00014791058710795493, 0.00016461805190164195, 0.0001832123878808213, 0.00020390660783804838, 0.00022693775231912667, 0.0002525695952408502, 0.00028109565304884165, 0.0003128425312009206, 0.00034817364545757467, 0.000387493359546164, 0.00043125158527648413, 0.000479948896161999, 0.0005341422110856752, 0.0005944511105862747, 0.000661564854976911, 0.0007362501807904768, 0.000819359960025154, 0.0009118428153863784, 0.0010147537942363236, 0.0011292662143124058, 0.0012566848055005314, 0.001398460284076611, 0.001556205508878191, 0.0017317133828362316, 0.001926976678160498, 0.0021442099791738013, 0.002385873953231545, 0.0026547021771897573, 0.002953730764272734, 0.00328633105362652, 0.0036562456418988932, 0.004067628052290441, 0.004525086350926591, 0.005033731032138946, 0.005599227502076752, 0.006227853492423172, 0.006926561730891545, 0.007703048180157392, 0.008565826128893828, 0.009524306373870396, 0.010588883666077516, 0.011771029501015322, 0.013083391206994519, 0.014539897117631557, 0.01615586739636699, 0.01794812980094143, 0.019935139321846054, 0.022137100186694014, 0.02457608817653795, 0.027276170533376276, 0.030263519932599573, 0.03356651803204949, 0.037215842974018136, 0.041244533894234534, 0.045688023974495985, 0.05058413186381734, 0.05597299940074171, 0.061896961529428834, 0.0684003321722082, 0.07552908769203426, 0.08333042758090456, 0.09185219032412252, 0.10114210124846262, 0.1112468288535961, 0.12221082698963813, 0.1340749426524777, 0.14687477349726324, 0.16063876574080665, 0.17538605212225522, 0.19112404095353744, 0.20784578054794528, 0.22552713740214936, 0.2441238395358261, 0.2635684453912084, 0.2837672993085114, 0.30459752073319923, 0.32590403766886006, 0.347496604146505, 0.36914662083080335, 0.39058338409251714, 0.4114890853510212, 0.4314914072962017, 0.4501518051553658, 0.46694630821321775, 0.48123351242547185, 0.49220050325711495, 0.4987699133165117, 0.49943603883853804, 0.49196496743181034, 0.4728172973200351, 0.43595953968389695, 0.37019190815875014]];

#[cfg(feature = "std")]
#[cfg(test)]
#[rustfmt::skip]
mod test {
    use super::*;
    const CUTOFF_TEST_INPUT: [f32; 101] = [0.0, 0.5877852522924732, -0.9510565162951536, 0.9510565162951535, -0.5877852522924728, -4.898587196589413e-16, 0.5877852522924737, -0.9510565162951538, 0.9510565162951533, -0.5877852522924724, -9.797174393178826e-16, 0.587785252292474, -0.951056516295154, 0.9510565162951532, -0.587785252292472, -1.4695761589768238e-15, 0.5877852522924744, -0.9510565162951541, 0.951056516295153, -0.5877852522924716, -1.959434878635765e-15, 0.5877852522924748, -0.9510565162951542, 0.9510565162951529, -0.5877852522924712, -2.4492935982947065e-15, 0.5877852522924751, -0.9510565162951544, 0.9510565162951528, -0.5877852522924709, -2.9391523179536475e-15, 0.5877852522924756, -0.9510565162951545, 0.9510565162951525, -0.5877852522924705, -3.429011037612589e-15, 0.587785252292476, -0.9510565162951546, 0.9510565162951524, -0.58778525229247, -3.91886975727153e-15, 0.5877852522924764, -0.9510565162951549, 0.9510565162951523, -0.5877852522924696, -4.408728476930472e-15, 0.5877852522924768, -0.951056516295155, 0.9510565162951521, -0.5877852522924693, -4.898587196589413e-15, 0.5877852522924887, -0.9510565162951552, 0.9510565162951563, -0.5877852522924689, -1.9599300631450357e-14, 0.5877852522924776, -0.9510565162951509, 0.9510565162951518, -0.5877852522924569, -5.878304635907295e-15, 0.5877852522924665, -0.9510565162951554, 0.9510565162951473, -0.587785252292468, 7.842691359635767e-15, 0.5877852522924784, -0.95105651629516, 0.9510565162951515, -0.5877852522924791, -6.858022075225178e-15, 0.5877852522924902, -0.9510565162951558, 0.9510565162951558, -0.5877852522924673, -2.1558735510086122e-14, 0.5877852522924791, -0.9510565162951515, 0.9510565162951512, -0.5877852522924554, -7.83773951454306e-15, 0.587785252292468, -0.9510565162951561, 0.9510565162951466, -0.5877852522924665, 5.883256481000002e-15, 0.5877852522924799, -0.9510565162951606, 0.9510565162951509, -0.5877852522924776, -8.817456953860943e-15, 0.5877852522924919, -0.9510565162951563, 0.9510565162951552, -0.5877852522924657, -2.3518170388721888e-14, 0.5877852522924807, -0.9510565162951521, 0.9510565162951506, -0.5877852522924538, -9.797174393178826e-15];
    const CUTOFF_TEST_OUTPUT: [f32; 101] = [0.0, 0.44363839858649595, -0.5002286634938007, 0.25487923461667605, 0.14431615245617008, -0.5171711510360325, 0.7071502617836816, -0.6344946640364608, 0.323291178894994, 0.10945852579697252, -0.49941030314419593, 0.6981006577781912, -0.6298836604878166, 0.3209417552392504, 0.11065561694121828, -0.5000202515475538, 0.6984114420125804, -0.6300420129645394, 0.3210224398561308, 0.11061450607553514, -0.4999993045152374, 0.6984007689665237, -0.6300365747759498, 0.3210196689606451, 0.1106159179173033, -0.5000000238845491, 0.6984011355034956, -0.6300367615358649, 0.3210197641195746, 0.11061586943140705, -0.4999999991797512, 0.6984011229157723, -0.6300367551220993, 0.32101976085159745, 0.11061587109652476, -0.500000000028171, 0.6984011233480638, -0.6300367553423626, 0.3210197609638271, 0.11061587103934117, -0.49999999999903455, 0.6984011233332178, -0.6300367553347981, 0.3210197609599726, 0.11061587104130538, -0.5000000000000354, 0.6984011233337277, -0.6300367553350577, 0.3210197609601045, 0.11061587104123821, -0.5000000000000013, 0.6984011233337191, -0.6300367553350443, 0.32101976096010076, 0.1106158710412436, -0.5000000000000149, 0.6984011233337064, -0.6300367553350431, 0.3210197609601, 0.11061587104124954, -0.4999999999999985, 0.6984011233337, -0.6300367553350517, 0.32101976096009754, 0.11061587104123904, -0.49999999999999123, 0.6984011233337157, -0.6300367553350541, 0.32101976096009865, 0.11061587104123344, -0.5000000000000079, 0.698401123333722, -0.6300367553350451, 0.3210197609601003, 0.1106158710412446, -0.5000000000000157, 0.6984011233337064, -0.6300367553350426, 0.3210197609600987, 0.11061587104125092, -0.4999999999999995, 0.6984011233337002, -0.6300367553350512, 0.32101976096009627, 0.11061587104124032, -0.4999999999999922, 0.6984011233337158, -0.6300367553350534, 0.32101976096009727, 0.11061587104123471, -0.5000000000000088, 0.6984011233337223, -0.6300367553350446, 0.32101976096009915, 0.11061587104124593, -0.5000000000000165, 0.6984011233337066, -0.6300367553350418, 0.32101976096009766, 0.11061587104125231, -0.5000000000000006];
    const STEP_TEST_MIN_OUTPUT: f32 = 0.9999999999996397;
    const STEP_TEST_MAX_OUTPUT: f32 = 1.1249546329059645;

    #[test]
    fn test() {
        println!("order 1");
        let mut filter = butter1(0.4).unwrap();
        let out = (0..CUTOFF_TEST_INPUT.len()).map(|i| {filter.update(CUTOFF_TEST_INPUT[i])}).collect::<Vec<f32>>();
        // Check overall match to reference output to catch phase error, etc
        (0..CUTOFF_TEST_INPUT.len()).for_each(|i| { let expected = CUTOFF_TEST_OUTPUT[i]; let rel_err = (out[i] - expected).abs() / expected.abs().max(1e-4); assert!(rel_err < 0.05); });
        // Check approximate attenuation at cutoff frequency; should be -3dB or 1/sqrt(2) magnitude
        let maxmag = out.iter().fold(0.0_f32, |a, b| a.abs().max(b.abs()));
        let attenuation_rel_err = (maxmag - 0.707).abs() / 0.707;
        println!("attenuation rel err {attenuation_rel_err}");
        assert!(attenuation_rel_err < 0.05);
        // Check convergence of step responses at min and max tabulated cutoff
        let mut filtermin = butter1(MIN_CUTOFF_RATIO).unwrap();
        (0..999989).for_each(|_| {filtermin.update(1.0);});
        let step_min_final = filtermin.update(1.0);
        let step_min_rel_err = (step_min_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
        println!("step min rel err {step_min_rel_err}");
        assert!(step_min_rel_err < 1e-3);
        let mut filtermax = butter1(MAX_CUTOFF_RATIO).unwrap();
        (0..1).for_each(|_| {filtermax.update(1.0);});
        let step_max_final = filtermax.update(1.0);
        let step_max_rel_err = (step_max_final - STEP_TEST_MAX_OUTPUT).abs() / STEP_TEST_MAX_OUTPUT;
        println!("step max rel err {step_max_rel_err}");
        assert!(step_max_rel_err < 1e-6);
    }
}
