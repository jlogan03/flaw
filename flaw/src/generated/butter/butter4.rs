//! Butterworth filter of order 4.
//! Region of validity: cutoff ratio from 3.16e-02 to 4.00e-01 .
//! This file is autogenerated.
#![allow(clippy::style)]

use crate::{SisoIirFilter, StagedSisoIirFilter};

/// Minimum tabulated cutoff ratio
#[allow(dead_code)]
pub const MIN_CUTOFF_RATIO: f64 = 0.03162277660168379;

/// Maximum tabulated cutoff ratio
#[allow(dead_code)]
pub const MAX_CUTOFF_RATIO: f64 = 0.4;

/// Initialise a Butterworth filter of order 4 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 3.16e-02 to 4.00e-01
pub fn butter4(cutoff_ratio: f64) -> Result<SisoIirFilter<4>, &'static str> {
    let avals = &[&AVALS[0][..], &AVALS[1][..], &AVALS[2][..], &AVALS[3][..]];
    let cvals = &[&CVALS[0][..], &CVALS[1][..], &CVALS[2][..], &CVALS[3][..]];
    SisoIirFilter::new_interpolated(cutoff_ratio, &LOG10_CUTOFF_RATIOS, avals, cvals, &DVALS)
}

/// Initialise a two-stage Butterworth filter of combined order 2*4 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 2.83e-02 to 3.89e-01
pub fn butter4_2stage(cutoff_ratio: f64) -> Result<StagedSisoIirFilter<4, 2>, &'static str> {
    // Look up the per-stage cutoff ratio corresponding to the desired combined cutoff
    let log10_root_cutoff_ratio = libm::log10(cutoff_ratio);

    if log10_root_cutoff_ratio < LOG10_ROOT2_CUTOFF_RATIOS[0]
        || log10_root_cutoff_ratio > *LOG10_ROOT2_CUTOFF_RATIOS.last().ok_or("Table size error")?
    {
        return Err("Selected cutoff ratio is outside the grid");
    }

    let log10_cutoff_ratio = interpn::MulticubicRectilinear::<'_, _, 4>::new(
        &[&LOG10_ROOT2_CUTOFF_RATIOS],
        &LOG10_CUTOFF_RATIOS,
        true,
    )?
    .interp_one(&[log10_root_cutoff_ratio])?;
    let cutoff_ratio = libm::pow(10.0, log10_cutoff_ratio);
    let filt = butter4(cutoff_ratio)?;
    Ok(StagedSisoIirFilter::new([filt, filt]))
}

/// [dimensionless] Log base-10 of cutoff ratios, to improve float precision during interpolation
#[rustfmt::skip]
static LOG10_CUTOFF_RATIOS: [f64; 50] = [-1.5, -1.477508979768817, -1.4550179595376342, -1.4325269393064513, -1.4100359190752685, -1.3875448988440855, -1.3650538786129025, -1.3425628583817197, -1.3200718381505367, -1.2975808179193538, -1.275089797688171, -1.252598777456988, -1.230107757225805, -1.2076167369946222, -1.1851257167634393, -1.1626346965322565, -1.1401436763010735, -1.1176526560698905, -1.0951616358387077, -1.0726706156075247, -1.050179595376342, -1.027688575145159, -1.005197554913976, -0.9827065346827931, -0.9602155144516102, -0.9377244942204274, -0.9152334739892445, -0.8927424537580615, -0.8702514335268786, -0.8477604132956957, -0.8252693930645127, -0.8027783728333299, -0.780287352602147, -0.7577963323709641, -0.7353053121397812, -0.7128142919085982, -0.6903232716774154, -0.6678322514462325, -0.6453412312150495, -0.6228502109838666, -0.6003591907526837, -0.5778681705215009, -0.555377150290318, -0.532886130059135, -0.5103951098279521, -0.48790408959676923, -0.46541306936558624, -0.4429220491344035, -0.4204310289032205, -0.3979400086720376];

/// [dimensionless] Log base-10 of root cutoff ratios, used to generate multi-stage filters
#[rustfmt::skip]
static LOG10_ROOT2_CUTOFF_RATIOS: [f64; 50] = [-1.5482231232639339, -1.524115342775162, -1.5024145309897157, -1.4800140932752786, -1.4574668885982132, -1.4349291972736877, -1.412386431416418, -1.3898380415918068, -1.3672834194277832, -1.344721891425571, -1.322152712155408, -1.2995750567834985, -1.2769880128777455, -1.2543905714352788, -1.2317816170815548, -1.2091599173869039, -1.1865241112584608, -1.1638726963727744, -1.1412040156326457, -1.118516242658811, -1.095807366365686, -1.0730751747302214, -1.0503172379482157, -1.0275309231616718, -1.0047135089051433, -0.9818618854523911, -0.9589726313621157, -0.9360420184078289, -0.9130659913162367, -0.8900401474849307, -0.8669597168549125, -0.8438195420690792, -0.8206140589730989, -0.7973372774307216, -0.7739827624081536, -0.7505436155406553, -0.7270124584424256, -0.7033814220418784, -0.6796421538685651, -0.6557858732665455, -0.6318035452542128, -0.6076863322373117, -0.5834266658040445, -0.5590206287898771, -0.534472888349576, -0.5098057862251055, -0.4850553943718008, -0.46024775885746044, -0.4354156694509649, -0.41057687976222396];

/// State-Space `D` 1x1 matrix
#[rustfmt::skip]
static DVALS: [f64; 50] = [7.609661935031952e-05, 9.245423772692906e-05, 0.00011226188121451331, 0.00013622959004378708, 0.00016520896079655638, 0.0002002202163013647, 0.00024248417474171757, 0.00029345994202507696, 0.0003548892774121129, 0.0004288487256221843, 0.0005178107714166761, 0.0006247154577609422, 0.0007530541194123035, 0.0009069671243061276, 0.0010913577906238319, 0.0013120249645991713, 0.00157581711160836, 0.001890811202228472, 0.002266520180673707, 0.0027141334050958593, 0.003246795173882607, 0.003879927334119088, 0.004631603054034288, 0.005522980191947897, 0.006578804391529588, 0.007827994185446857, 0.009304323140821198, 0.011047217622317383, 0.013102693338603488, 0.01552445981917225, 0.018375229804314584, 0.021728280849075247, 0.025669330098726795, 0.030298801366306014, 0.03573458796534446, 0.042115447509423636, 0.04960520931690258, 0.058398035771612324, 0.06872506265705175, 0.08086285984357976, 0.09514431716437508, 0.11197279241943686, 0.13184069188883543, 0.15535413881019858, 0.18326610054960152, 0.21652141549082157, 0.25631878803763863, 0.30419733866080534, 0.3621592717827853, 0.43284664499029185];

/// State-Space `A` matrix, first row
#[rustfmt::skip]
static AVALS: [[f64; 50]; 4] = [[3.48120132755602, 3.4536722640898203, 3.4246875340379277, 3.394170982238884, 3.362042595165622, 3.328218323576824, 3.2926098993116057, 3.2551246462383165, 3.2156652853564864, 3.174129734021959, 3.130410899212813, 3.0843964646697506, 3.0359686716196634, 2.9850040926129386, 2.931373397759738, 2.874941112320665, 2.8155653641730645, 2.7530976191123693, 2.6873824012315817, 2.6182569947211087, 2.545551122311922, 2.469086594210604, 2.388676919705687, 2.304126871619386, 2.2152319913954504, 2.121778019811695, 2.0235402350482867, 1.9202826761010594, 1.8117572252874568, 1.6977025188563246, 1.5778426495195752, 1.4518856191608513, 1.3195214942064037, 1.1804202104440833, 1.03422896890112, 0.8805691604646115, 0.7190327553922096, 0.5491780965011219, 0.3705250444244953, 0.1825494442024309, -0.015323078701893606, -0.2237239178677526, -0.4433486950198249, -0.6749645150757143, -0.9194166242699102, -1.177633399710989, -1.4506279569609513, -1.739493736149643, -2.0453901688979945, -2.369513007182037], [-4.5739752781920595, -4.505347290232155, -4.433830029195546, -4.359348558817967, -4.281831826022527, -4.201213603852567, -4.117433544847244, -4.030438354262168, -3.9401830930374824, -3.8466326209187662, -3.7497631906472955, -3.6495642046651127, -3.546040146344083, -3.439212698372001, -3.3291230616517726, -3.2158344889460944, -3.099435048606501, -2.980040635166319, -2.857798245491085, -2.7328895417523063, -2.605534725961363, -2.4759967554815137, -2.344585935226528, -2.2116649306630283, -2.077654256904616, -1.9430383139326908, -1.808372057326256, -1.674288419120252, -1.5415066261629222, -1.410841605656164, -1.2832147220322443, -1.1596661592414934, -1.041369352106737, -0.9296479850387103, -0.8259962230534669, -0.7321030276659353, -0.6498816504589366, -0.5815057049142749, -0.5294536116241428, -0.4965637175283888, -0.48610303627039336, -0.5018533794749608, -0.5482196861009656, -0.6303666432836641, -0.7543912403723153, -0.9275406631198894, -1.1584867379736847, -1.4576695143160818, -1.8377224968602184, -2.313988414415879], [2.68595145033013, 2.6283137575137268, 2.568792759266689, 2.507393710705886, 2.4441301566349023, 2.379024756759111, 2.3121101343023174, 2.2434297404100967, 2.173038724929415, 2.1010048021440726, 2.027409097812455, 1.9523469613906723, 1.875928724624974, 1.7982803847570776, 1.7195441873999124, 1.6398790807011787, 1.559461008705187, 1.4784830078260724, 1.3971550660169456, 1.3157036994926092, 1.2343711966301376, 1.1534144727654398, 1.0731034727745552, 0.9937190502077079, 0.9155502418005508, 0.8388908436636131, 0.7640351792819166, 0.6912729281527046, 0.6208828553807016, 0.5531252439691858, 0.48823277891950867, 0.4263995600719711, 0.36776782121901674, 0.31241179567006067, 0.26031797803977985, 0.21136076713174345, 0.1652721047129901, 0.12160320539349212, 0.07967573907260841, 0.03851878422598575, -0.003213624066112984, -0.047351685979359, -0.09635624904406433, -0.15351754805773804, -0.2232282516030347, -0.31136309292843756, -0.42581293494957595, -0.5772448407504669, -0.7801960451963471, -1.0546654058785672], [-0.5943950456036955, -0.5781179991750226, -0.5614464542085033, -0.5443958075675039, -0.5269842691507414, -0.5092329999441901, -0.4911662355625469, -0.47281139145864626, -0.454199145687013, -0.4353634948572205, -0.4163417787206391, -0.3971746687194854, -0.3779061158111512, -0.3585832529869135, -0.3392562481578588, -0.3199781035093363, -0.30080439805748443, -0.2817929710077785, -0.2630035446482213, -0.24449728694294484, -0.22633631576281776, -0.20858314884043527, -0.19130010611826243, -0.1745486742352318, -0.1583888465558581, -0.142878456509767, -0.12807252725708626, -0.11402266709059009, -0.1007765479228921, -0.08837751427610238, -0.07686438327587272, -0.06627151357653288, -0.05662924489831203, -0.04796484293632979, -0.04030413133294413, -0.03367406008119788, -0.028106558716704304, -0.023644169326136256, -0.02034817438578891, -0.018310268397303698, -0.017669335591601235, -0.018635695388917878, -0.021526440056511026, -0.026817514546059955, -0.035221492548363424, -0.04780549209382917, -0.06617297871800568, -0.09274932735669253, -0.13123963757000354, -0.18737949236818482]];

/// State-Space `C` vector
#[rustfmt::skip]
static CVALS: [[f64; 50]; 4] = [[0.0005692941297061355, 0.0006891235874427778, 0.0008335093900010436, 0.0010073048816240696, 0.0012162754064872954, 0.001467257457850176, 0.0017683424931478548, 0.0021290884580698033, 0.002560762239167831, 0.0030766163938835372, 0.003692203568239262, 0.004425731980386163, 0.0052984651922191005, 0.00633516907514369, 0.00756460835736787, 0.009020094369513908, 0.010740084526149177, 0.012768832627960091, 0.015157087168273574, 0.01796283239288189, 0.02125206379432423, 0.025099585903661077, 0.029589815532547227, 0.03481756783948033, 0.040888795519367575, 0.04792124274368233, 0.056044964798627334, 0.06540265110852395, 0.07614967268135464, 0.08845375381558153, 0.10249414049722913, 0.11846010189016147, 0.13654855320205656, 0.1569605229502425, 0.17989609792688244, 0.2055473542936591, 0.23408860760455008, 0.26566306521090777, 0.30036460752228733, 0.3382129094953836, 0.37911936479755265, 0.4228401778630784, 0.4689113688559157, 0.5165580242737634, 0.5645665026879815, 0.6111028113285946, 0.6534519523288077, 0.6876399894893589, 0.7078800730513752, 0.7057508245415653], [0.00010851566043956415, 0.000138186976948075, 0.00017582118722418738, 0.0002235052732369768, 0.0002838567784965351, 0.0003601534013165913, 0.0004564925732741566, 0.0005779874463730393, 0.0007310069337131812, 0.0009234688563153704, 0.0011651968581211237, 0.0014683535738203384, 0.0018479645766680017, 0.0023225498949171943, 0.002914882354463866, 0.003652894656078734, 0.004570759883737346, 0.005710172997302306, 0.0071218636883427855, 0.008867373632868105, 0.011021133469660748, 0.013672876513931627, 0.0169304269461647, 0.020922899548409653, 0.025804345399773297, 0.031757872489115574, 0.039000260864732066, 0.04778707720535714, 0.05841827142958286, 0.07124420509680793, 0.08667201342026536, 0.10517213309528389, 0.12728472693843568, 0.15362558855856157, 0.1848908931003204, 0.22185983842338697, 0.2653937405991858, 0.3164294236726935, 0.37596364330943893, 0.44502359676757347, 0.5246159615287743, 0.6156428302316785, 0.7187664886103812, 0.8341947658591823, 0.9613422623857979, 1.0982960756409157, 1.2409708115907394, 1.3817648450628912, 1.507407389494973, 1.5954777482154325], [0.0005087783025104887, 0.0006128156958658485, 0.0007374250324635521, 0.0008864995774629813, 0.0010646280464154023, 0.0012772097165900697, 0.0015305868167951294, 0.0018321965296583882, 0.002190745252527191, 0.0026164081344143123, 0.0031210573545821596, 0.0037185231567371272, 0.0044248923314519194, 0.005258849686483754, 0.006242069107736148, 0.007399662151200571, 0.008760693788837107, 0.010358777042415872, 0.01223276087535274, 0.014427528982384532, 0.01699493113952886, 0.019994873676927538, 0.023496601537934585, 0.027580211398450037, 0.03233844351754179, 0.0378788093882108, 0.044326122762279, 0.051825512962989026, 0.06054601100766378, 0.07068480990165847, 0.08247230872790343, 0.0961780527914669, 0.11211767399746767, 0.1306609084067222, 0.15224070754660096, 0.17736334333138298, 0.20661919461614323, 0.24069353142496117, 0.2803759707882189, 0.32656617842453, 0.380271510590107, 0.44258906917287033, 0.5146590930135594, 0.5975669687700311, 0.6921542309946126, 0.7986688843508207, 0.9161312967335293, 1.041193010331249, 1.166081855555023, 1.274878197439305], [3.0865165821299295e-05, 3.9004778796984945e-05, 4.9232846063848625e-05, 6.206677235730962e-05, 7.814643733402963e-05, 9.826147490474612e-05, 0.00012338413545033734, 0.00015470873849882666, 0.0001936988707980499, 0.00024214364567024492, 0.0003022245138043509, 0.00037659430278079827, 0.00046847036214961305, 0.00058174390252025, 0.0007211078411789406, 0.0008922057046698243, 0.0011018043939023234, 0.0013579938959377214, 0.0016704173391397952, 0.002050535151148705, 0.0025119275161895206, 0.003070639873496453, 0.0037455768982998603, 0.004558951321615946, 0.0055367951522386025, 0.006709542458662779, 0.008112694961759637, 0.009787584405090588, 0.011782249135446754, 0.014152446649874577, 0.01696282909785351, 0.020288314789791036, 0.024215695318190383, 0.02884552411761209, 0.034294336438860575, 0.040697249399644767, 0.04821097758858265, 0.05701726272551456, 0.0673266330974318, 0.07938223917647026, 0.09346318029476398, 0.10988610156806171, 0.12900263113788146, 0.15118792693286545, 0.1768111949547261, 0.2061705026744304, 0.23935741033179897, 0.27598324011631964, 0.3146296202113961, 0.35174006037873906]];

#[cfg(feature = "std")]
#[cfg(test)]
#[rustfmt::skip]
mod test {
    use super::*;
    static CUTOFF_TEST_INPUT: [f32; 101] = [0.0, 0.5877852522924732, -0.9510565162951536, 0.9510565162951535, -0.5877852522924728, -4.898587196589413e-16, 0.5877852522924736, -0.9510565162951538, 0.9510565162951533, -0.5877852522924725, -9.797174393178826e-16, 0.587785252292474, -0.951056516295154, 0.9510565162951532, -0.587785252292472, -1.4695761589768238e-15, 0.5877852522924744, -0.9510565162951541, 0.951056516295153, -0.5877852522924716, -1.959434878635765e-15, 0.5877852522924748, -0.9510565162951542, 0.9510565162951529, -0.5877852522924712, -2.4492935982947065e-15, 0.5877852522924751, -0.9510565162951544, 0.9510565162951528, -0.5877852522924708, -2.9391523179536475e-15, 0.5877852522924756, -0.9510565162951545, 0.9510565162951525, -0.5877852522924705, -3.429011037612589e-15, 0.587785252292476, -0.9510565162951546, 0.9510565162951524, -0.58778525229247, -3.91886975727153e-15, 0.5877852522924764, -0.9510565162951549, 0.9510565162951523, -0.5877852522924697, -4.408728476930472e-15, 0.5877852522924768, -0.951056516295155, 0.9510565162951521, -0.5877852522924693, -4.898587196589413e-15, 0.5877852522924887, -0.9510565162951552, 0.9510565162951563, -0.5877852522924688, -1.9599300631450357e-14, 0.5877852522924776, -0.9510565162951509, 0.9510565162951519, -0.5877852522924569, -5.878304635907295e-15, 0.5877852522924665, -0.9510565162951554, 0.9510565162951473, -0.587785252292468, 7.842691359635767e-15, 0.5877852522924784, -0.95105651629516, 0.9510565162951515, -0.5877852522924791, -6.858022075225178e-15, 0.5877852522924902, -0.9510565162951558, 0.9510565162951558, -0.5877852522924673, -2.1558735510086122e-14, 0.5877852522924791, -0.9510565162951515, 0.9510565162951512, -0.5877852522924554, -7.83773951454306e-15, 0.587785252292468, -0.9510565162951561, 0.9510565162951466, -0.5877852522924665, 5.883256481000002e-15, 0.5877852522924799, -0.9510565162951606, 0.9510565162951509, -0.5877852522924776, -8.817456953860943e-15, 0.5877852522924918, -0.9510565162951563, 0.9510565162951552, -0.5877852522924657, -2.3518170388721888e-14, 0.5877852522924807, -0.9510565162951521, 0.9510565162951506, -0.5877852522924538, -9.797174393178826e-15];
    static CUTOFF_TEST_OUTPUT: [f32; 101] = [0.0, 0.2544208744295693, 0.003168304184272941, -0.3046939140370453, 0.38625525728967397, -0.20113280307219475, -0.13356644736239975, 0.43162974365413936, -0.5368100794474011, 0.39168769220121413, -0.05607350125670416, -0.3253369384980467, 0.5881312810635939, -0.6178947675900957, 0.3967487355665334, -0.00955958058436764, -0.39107143736244726, 0.6461132579464968, -0.653179905958144, 0.40679985421929205, -0.0005607237386403771, -0.40930313643897254, 0.6645013997494552, -0.6659370632184936, 0.41202029826642134, 0.0006121897697425291, -0.41415344553334005, 0.6701647698795776, -0.6703481688124664, 0.41426317075159663, 0.0004408093808892354, -0.4153462973669221, 0.6718488907562206, -0.6718179891526701, 0.41513906570238573, 0.00021384408371084615, -0.41560071196073345, 0.6723285625990595, -0.6722906177048893, 0.4154598610304036, 8.91511541165611e-05, -0.41563898279713707, 0.6724580130015276, -0.6724373949917912, 0.41557183281437426, 3.411780557736641e-05, -0.41563713739664077, 0.6724903971184888, -0.6724813392606962, 0.4156093887005265, 1.231497590740162e-05, -0.41563210081277974, 0.6724975397236844, -0.672493960865967, 0.41562154134513496, 4.248563680972565e-06, -0.4156291352302267, 0.672498726377768, -0.6724974047724221, 0.41562533960536113, 1.410483964112275e-06, -0.4156277896791742, 0.6724987447844473, -0.6724982804684225, 0.4156264846773235, 4.520298419761762e-07, -0.41562724817569574, 0.6724986359563607, -0.6724984793461831, 0.4156268162373795, 1.3990536883195115e-07, -0.41562704567722214, 0.6724985659666686, -0.6724985150244741, 0.4156269076505314, 4.173156307285031e-08, -0.4156269738387808, 0.6724985331926528, -0.6724985171878204, 0.41562693124551425, 1.1933479871342466e-08, -0.4156269494075287, 0.6724985197754905, -0.6724985149235343, 0.4156269367441277, 3.2375749645161404e-09, -0.4156269414001672, 0.6724985147007203, -0.6724985132867576, 0.415626937793087, 8.163190428681078e-10, -0.41562693886564056, 0.6724985128848529, -0.6724985124918267, 0.4156269378920417, 1.826414282660714e-10, -0.41562693809122675, 0.6724985122628439, -0.6724985121602214, 0.41562693784758914, 3.1550331890394544e-11];
    const STEP_TEST_MIN_OUTPUT: f32 = 1.0000000000269045;
    const STEP_TEST_MAX_OUTPUT: f32 = 1.1385974695318573;

    #[test]
    fn test() {
        let order = 4;
        println!("order {order}");
        let mut filter = butter4(0.4).unwrap();
        let out = (0..CUTOFF_TEST_INPUT.len()).map(|i| {filter.update(CUTOFF_TEST_INPUT[i])}).collect::<Vec<f32>>();

        // Check overall match to reference output to catch phase error, etc
        (0..CUTOFF_TEST_INPUT.len()).for_each(|i| { let expected = CUTOFF_TEST_OUTPUT[i]; let rel_err = (out[i] - expected).abs() / expected.abs().max(1e-4); assert!(rel_err < 0.05); });
        // Check approximate attenuation at cutoff frequency; should be -3dB or 1/sqrt(2) magnitude
        let maxmag = out.iter().fold(0.0_f32, |a, b| a.abs().max(b.abs()));
        let attenuation_rel_err = (maxmag - 0.707).abs() / 0.707;
        println!("order {order} attenuation rel err {attenuation_rel_err}");
        assert!(attenuation_rel_err < 0.05);

        // Check convergence of step responses at min and max tabulated cutoff
        let mut filtermin = butter4(MIN_CUTOFF_RATIO).unwrap();
        (0..309).for_each(|_| {filtermin.update(1.0);});
        let step_min_final = filtermin.update(1.0);
        let step_min_rel_err = (step_min_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
        println!("order {order} step min rel err {step_min_rel_err}");
        assert!(step_min_rel_err < 1e-4);


    // Check response of staged filter
    let mut filter_2stage = butter4_2stage(0.1).unwrap();
    let mut maxmag_2stage = 0.0;
    for i in 0..99999 {
        let u = libm::sinf((i as f32) * 2.0 * core::f32::consts::PI / 10.0);
        let v = filter_2stage.update(u);
        maxmag_2stage = v.abs().max(maxmag_2stage);
    }
    let attenuation_2stage_rel_err = (maxmag_2stage - 0.707).abs() / 0.707;
    println!("order {order} attenuation 2stage rel err {attenuation_rel_err}");
    assert!(attenuation_2stage_rel_err < 0.05);

    let mut filtermin_2stage = butter4_2stage(MIN_CUTOFF_RATIO).unwrap();
    (0..99999).for_each(|_| {filtermin_2stage.update(1.0);});
    let step_min_2stage_final = filtermin_2stage.update(1.0);
    let step_min_2stage_rel_err = (step_min_2stage_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
    println!("order {order} step min 2stage rel err {step_min_2stage_rel_err}");
    assert!(step_min_2stage_rel_err < 2e-4);  // 1e-4 per stage
    


                let mut filtermax = butter4(MAX_CUTOFF_RATIO).unwrap();
        (0..1).for_each(|_| {filtermax.update(1.0);});
        let step_max_final = filtermax.update(1.0);
        let step_max_rel_err = (step_max_final - STEP_TEST_MAX_OUTPUT).abs() / STEP_TEST_MAX_OUTPUT;
        println!("order {order} step max rel err {step_max_rel_err}");
        assert!(step_max_rel_err < 1e-6);
    }
}
