//! Butterworth filter of order 4.
//! Region of validity: cutoff ratio from 3.16e-02 to 4.00e-01 .
//! This file is autogenerated.
#![allow(clippy::style)]

use crate::{SisoIirFilter, StagedSisoIirFilter};

/// Minimum tabulated cutoff ratio
#[allow(dead_code)]
pub const MIN_CUTOFF_RATIO: f64 = 0.03162277660168379;

/// Maximum tabulated cutoff ratio
#[allow(dead_code)]
pub const MAX_CUTOFF_RATIO: f64 = 0.4;

/// Initialise a Butterworth filter of order 4 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 3.16e-02 to 4.00e-01
pub fn butter4(cutoff_ratio: f64) -> Result<SisoIirFilter<4>, &'static str> {
    let avals = &[&AVALS[0][..], &AVALS[1][..], &AVALS[2][..], &AVALS[3][..]];
    let cvals = &[&CVALS[0][..], &CVALS[1][..], &CVALS[2][..], &CVALS[3][..]];
    SisoIirFilter::new_interpolated(cutoff_ratio, &LOG10_CUTOFF_RATIOS, avals, cvals, &DVALS)
}

/// Initialise a two-stage Butterworth filter of combined order 2*4 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 2.82e-02 to 3.86e-01
pub fn butter4_2stage(cutoff_ratio: f64) -> Result<StagedSisoIirFilter<4, 2>, &'static str> {
    // Look up the per-stage cutoff ratio corresponding to the desired combined cutoff
    let log10_root_cutoff_ratio = libm::log10(cutoff_ratio);

    if log10_root_cutoff_ratio < LOG10_ROOT2_CUTOFF_RATIOS[0]
        || log10_root_cutoff_ratio > *LOG10_ROOT2_CUTOFF_RATIOS.last().ok_or("Table size error")?
    {
        return Err("Selected cutoff ratio is outside the grid");
    }

    let log10_cutoff_ratio = interpn::MulticubicRectilinear::<'_, _, 4>::new(
        &[&LOG10_ROOT2_CUTOFF_RATIOS],
        &LOG10_CUTOFF_RATIOS,
        true,
    )?
    .interp_one(&[log10_root_cutoff_ratio])?;
    let cutoff_ratio = libm::pow(10.0, log10_cutoff_ratio);
    let filt = butter4(cutoff_ratio)?;
    Ok(StagedSisoIirFilter::new([filt, filt]))
}

/// [dimensionless] Log base-10 of cutoff ratios, to improve float precision during interpolation
#[rustfmt::skip]
static LOG10_CUTOFF_RATIOS: [f64; 30] = [-1.5, -1.4619979313335185, -1.423995862667037, -1.3859937940005556, -1.347991725334074, -1.3099896566675926, -1.2719875880011111, -1.2339855193346296, -1.1959834506681482, -1.1579813820016667, -1.1199793133351852, -1.081977244668704, -1.0439751760022224, -1.005973107335741, -0.9679710386692595, -0.929968970002778, -0.8919669013362965, -0.853964832669815, -0.8159627640033336, -0.7779606953368521, -0.7399586266703706, -0.7019565580038892, -0.6639544893374077, -0.6259524206709263, -0.5879503520044448, -0.5499482833379633, -0.5119462146714818, -0.47394414600500046, -0.435942077338519, -0.3979400086720376];

/// [dimensionless] Log base-10 of root cutoff ratios, used to generate multi-stage filters
#[rustfmt::skip]
static LOG10_ROOT2_CUTOFF_RATIOS: [f64; 30] = [-1.5498741091033506, -1.5090219073361315, -1.4717374811573185, -1.4334823092698254, -1.3953888262105043, -1.357277920331719, -1.319146285106886, -1.2809899926063506, -1.2428043794440535, -1.2045839130831273, -1.166322035800553, -1.1280109836752166, -1.089641578420414, -1.0512029911059773, -1.0126824795241807, -0.97406510656828, -0.9353334583187262, -0.8964674032344296, -0.8574439793124206, -0.8182375869205176, -0.7788208440956815, -0.7391680735729623, -0.6992646044942791, -0.6590921692400342, -0.6186374014006293, -0.5778985119326168, -0.5368925467920631, -0.49566774799265245, -0.4543313966391858, -0.4132882581271989];

/// State-Space `D` 1x1 matrix
#[rustfmt::skip]
static DVALS: [f64; 30] = [7.609661935031952e-05, 0.00010570524953889353, 0.000146580597448093, 0.0002028868444883183, 0.0002802694886418755, 0.0003863563328000112, 0.0005314169616304354, 0.0007292266797108758, 0.000998192935925612, 0.0013628172992367362, 0.0018555849951358797, 0.0025193982523311147, 0.0034107014282023017, 0.004603488564828731, 0.00619444328767958, 0.008309545858335715, 0.011112607372270293, 0.014816380248716373, 0.019697185824032883, 0.026114457262698763, 0.034537324371868364, 0.04558154474388684, 0.060062022916997276, 0.07906940895551705, 0.104084846730977, 0.13715678149485855, 0.1811816371907629, 0.24036391825328865, 0.32099754370279887, 0.43284664499029185];

/// State-Space `A` matrix, first row
#[rustfmt::skip]
static AVALS: [[f64; 30]; 4] = [[3.48120132755602, 3.4338430894267535, 3.3821785516705374, 3.325820885148071, 3.264349791484163, 3.197308921707632, 3.1242031584804715, 3.0444957594427615, 2.957605353802326, 2.8629027739856143, 2.7597076864437815, 2.6472849572298793, 2.5248406443951, 2.391517445182579, 2.2463893349552806, 2.0884550094461205, 1.9166295745570991, 1.7297337114488514, 1.5264792743253544, 1.3054499550961545, 1.0650752859845705, 0.8035958858050114, 0.5190175763696353, 0.20905199551310133, -0.1289579761304578, -0.4981274137666387, -0.9021270382119777, -1.3452708177169321, -1.832549025548868, -2.369513007182037], [-4.5739752781920595, -4.456338823358525, -4.330306662854827, -4.195537829820099, -4.051734127220523, -3.898655868531622, -3.7361406593486217, -3.5641256375616024, -3.382673625134071, -3.192003684810884, -2.992526626666904, -2.784886083961086, -2.570005895121227, -2.3491447210214287, -2.123959144416991, -1.8965770184084052, -1.6696836685006904, -1.4466248793742653, -1.231532665826572, -1.029483012293579, -0.8466996269982705, -0.6908251418265043, -0.5712923919812773, -0.49984542017171485, -0.49128570322731613, -0.5645582628007919, -0.7443507596564014, -1.0634621905523824, -1.566304139137353, -2.313988414415879], [2.68595145033013, 2.587466175542218, 2.4836156564372245, 2.3744676043678727, 2.2601666793103816, 2.1409462986895194, 2.0171405559455846, 1.8891957597621774, 1.757680944705164, 1.6232965173554317, 1.48687998769271, 1.3494074914413654, 1.2119895303125192, 1.075859031770408, 0.9423494327371884, 0.8128599720193332, 0.6888046392218973, 0.571540101845509, 0.46226611440101617, 0.3618888763330651, 0.27083263157380594, 0.18877588101574222, 0.11427303659295898, 0.044194939511336365, -0.02712742246517331, -0.10926134143856367, -0.21790602466577, -0.3786964526911105, -0.6339070618732169, -1.0546654058785672], [-0.5943950456036955, -0.566661725603069, -0.5378328348121036, -0.507996849207658, -0.4772666553922915, -0.4457810531903301, -0.4137057264635211, -0.38123350851871035, -0.34858376034822863, -0.31600068331794956, -0.28375040739176216, -0.25211673674745694, -0.22139550243762993, -0.19188757296881823, -0.16389071587835144, -0.1376906967904202, -0.11355226323463093, -0.09171101789955678, -0.07236769608432472, -0.05568713533882094, -0.04180548050999985, -0.030851340896438977, -0.022990587653273116, -0.018512058140995342, -0.017986445872685105, -0.022561485911742687, -0.03452237251805846, -0.058393231092192466, -0.10320047268534457, -0.18737949236818482]];

/// State-Space `C` vector
#[rustfmt::skip]
static CVALS: [[f64; 30]; 4] = [[0.0005692941297061355, 0.0007857962388008342, 0.0010820841425723652, 0.001486312682674311, 0.002035975601374981, 0.0027807258810197636, 0.003785922396517643, 0.00513703425289579, 0.006945032515123699, 0.00935288262336738, 0.012543212154469753, 0.01674715810399187, 0.022254283304630793, 0.029423277470801347, 0.03869290448814705, 0.05059229610740634, 0.06574918142921567, 0.08489391339271513, 0.1088560892190529, 0.1385489461117456, 0.17493414811998304, 0.2189553208003719, 0.2714213372342265, 0.3328072535482605, 0.4029168157436323, 0.48030557313284433, 0.5612776950257516, 0.6381011081549072, 0.6957464388950513, 0.7057508245415653], [0.00010851566043956415, 0.00016317308988038907, 0.00024474464691383964, 0.0003661016357063431, 0.0005460394799023211, 0.0008118676125849474, 0.0012030532523676363, 0.0017763045735137996, 0.00261259669840296, 0.003826785954532737, 0.005580622464827581, 0.008100152381113886, 0.011698685792235505, 0.016806670528622458, 0.02400991526063799, 0.034097581441684024, 0.04812110518968167, 0.06746453720223566, 0.09392538717704471, 0.12980235344897753, 0.17798120656803096, 0.24200039135095427, 0.32605916076249797, 0.4348939717910027, 0.5733736832643265, 0.7455076946770661, 0.9522271338658427, 1.1865655704843359, 1.4232054808621761, 1.5954777482154325], [0.0005087783025104887, 0.0006963297559147107, 0.0009503722565443781, 0.0012932956175432074, 0.0017545337140232283, 0.002372593491883485, 0.0031976105519438713, 0.0042945586700587415, 0.0057472764463181985, 0.007663525772589674, 0.010181372175273932, 0.013477287884944348, 0.017776540134812353, 0.023366659009437706, 0.030615103268985856, 0.039992680647243, 0.05210484500095241, 0.06773367647119863, 0.08789408485164199, 0.11390836064564096, 0.14750313193462472, 0.19093087524263308, 0.2471115614106303, 0.3197721035680544, 0.41351583331441394, 0.53364119204591, 0.6852459784603767, 0.8704307098156981, 1.0805075650140348, 1.274878197439305], [3.0865165821299295e-05, 4.5806130429881103e-05, 6.774473919413333e-05, 9.982096674256852e-05, 0.00014650620718925972, 0.00021412599985766852, 0.000311566721464079, 0.0004512210340992488, 0.0006502390887676236, 0.000932166101440405, 0.0013290619968160328, 0.0018842157863861479, 0.002655587471840711, 0.0037201363169340374, 0.005179231542793925, 0.00716539869908952, 0.009850745654711156, 0.013457554934519706, 0.018271745866602802, 0.024660217946811003, 0.03309347493097268, 0.0441752929684069, 0.05868116171449115, 0.07760567145975839, 0.10221273026908355, 0.13406232070146232, 0.17492681721823167, 0.2263282924284995, 0.2878704454618355, 0.35174006037873906]];

#[cfg(feature = "std")]
#[cfg(test)]
#[rustfmt::skip]
mod test {
    use super::*;
    static CUTOFF_TEST_INPUT: [f32; 101] = [0.0, 0.5877852522924732, -0.9510565162951536, 0.9510565162951535, -0.5877852522924728, -4.898587196589413e-16, 0.5877852522924736, -0.9510565162951538, 0.9510565162951533, -0.5877852522924725, -9.797174393178826e-16, 0.587785252292474, -0.951056516295154, 0.9510565162951532, -0.587785252292472, -1.4695761589768238e-15, 0.5877852522924744, -0.9510565162951541, 0.951056516295153, -0.5877852522924716, -1.959434878635765e-15, 0.5877852522924748, -0.9510565162951542, 0.9510565162951529, -0.5877852522924712, -2.4492935982947065e-15, 0.5877852522924751, -0.9510565162951544, 0.9510565162951528, -0.5877852522924708, -2.9391523179536475e-15, 0.5877852522924756, -0.9510565162951545, 0.9510565162951525, -0.5877852522924705, -3.429011037612589e-15, 0.587785252292476, -0.9510565162951546, 0.9510565162951524, -0.58778525229247, -3.91886975727153e-15, 0.5877852522924764, -0.9510565162951549, 0.9510565162951523, -0.5877852522924697, -4.408728476930472e-15, 0.5877852522924768, -0.951056516295155, 0.9510565162951521, -0.5877852522924693, -4.898587196589413e-15, 0.5877852522924887, -0.9510565162951552, 0.9510565162951563, -0.5877852522924688, -1.9599300631450357e-14, 0.5877852522924776, -0.9510565162951509, 0.9510565162951519, -0.5877852522924569, -5.878304635907295e-15, 0.5877852522924665, -0.9510565162951554, 0.9510565162951473, -0.587785252292468, 7.842691359635767e-15, 0.5877852522924784, -0.95105651629516, 0.9510565162951515, -0.5877852522924791, -6.858022075225178e-15, 0.5877852522924902, -0.9510565162951558, 0.9510565162951558, -0.5877852522924673, -2.1558735510086122e-14, 0.5877852522924791, -0.9510565162951515, 0.9510565162951512, -0.5877852522924554, -7.83773951454306e-15, 0.587785252292468, -0.9510565162951561, 0.9510565162951466, -0.5877852522924665, 5.883256481000002e-15, 0.5877852522924799, -0.9510565162951606, 0.9510565162951509, -0.5877852522924776, -8.817456953860943e-15, 0.5877852522924918, -0.9510565162951563, 0.9510565162951552, -0.5877852522924657, -2.3518170388721888e-14, 0.5877852522924807, -0.9510565162951521, 0.9510565162951506, -0.5877852522924538, -9.797174393178826e-15];
    static CUTOFF_TEST_OUTPUT: [f32; 101] = [0.0, 0.2544208744295693, 0.003168304184272941, -0.3046939140370453, 0.38625525728967397, -0.20113280307219475, -0.13356644736239975, 0.43162974365413936, -0.5368100794474011, 0.39168769220121413, -0.05607350125670416, -0.3253369384980467, 0.5881312810635939, -0.6178947675900957, 0.3967487355665334, -0.00955958058436764, -0.39107143736244726, 0.6461132579464968, -0.653179905958144, 0.40679985421929205, -0.0005607237386403771, -0.40930313643897254, 0.6645013997494552, -0.6659370632184936, 0.41202029826642134, 0.0006121897697425291, -0.41415344553334005, 0.6701647698795776, -0.6703481688124664, 0.41426317075159663, 0.0004408093808892354, -0.4153462973669221, 0.6718488907562206, -0.6718179891526701, 0.41513906570238573, 0.00021384408371084615, -0.41560071196073345, 0.6723285625990595, -0.6722906177048893, 0.4154598610304036, 8.91511541165611e-05, -0.41563898279713707, 0.6724580130015276, -0.6724373949917912, 0.41557183281437426, 3.411780557736641e-05, -0.41563713739664077, 0.6724903971184888, -0.6724813392606962, 0.4156093887005265, 1.231497590740162e-05, -0.41563210081277974, 0.6724975397236844, -0.672493960865967, 0.41562154134513496, 4.248563680972565e-06, -0.4156291352302267, 0.672498726377768, -0.6724974047724221, 0.41562533960536113, 1.410483964112275e-06, -0.4156277896791742, 0.6724987447844473, -0.6724982804684225, 0.4156264846773235, 4.520298419761762e-07, -0.41562724817569574, 0.6724986359563607, -0.6724984793461831, 0.4156268162373795, 1.3990536883195115e-07, -0.41562704567722214, 0.6724985659666686, -0.6724985150244741, 0.4156269076505314, 4.173156307285031e-08, -0.4156269738387808, 0.6724985331926528, -0.6724985171878204, 0.41562693124551425, 1.1933479871342466e-08, -0.4156269494075287, 0.6724985197754905, -0.6724985149235343, 0.4156269367441277, 3.2375749645161404e-09, -0.4156269414001672, 0.6724985147007203, -0.6724985132867576, 0.415626937793087, 8.163190428681078e-10, -0.41562693886564056, 0.6724985128848529, -0.6724985124918267, 0.4156269378920417, 1.826414282660714e-10, -0.41562693809122675, 0.6724985122628439, -0.6724985121602214, 0.41562693784758914, 3.1550331890394544e-11];
    const STEP_TEST_MIN_OUTPUT: f32 = 1.0000000000269045;
    const STEP_TEST_MAX_OUTPUT: f32 = 1.0035952431573196;

    #[test]
    fn test() {
        let order = 4;
        println!("order {order}");
        let mut filter = butter4(0.4).unwrap();
        let out = (0..CUTOFF_TEST_INPUT.len()).map(|i| {filter.update(CUTOFF_TEST_INPUT[i])}).collect::<Vec<f32>>();

        // Check overall match to reference output to catch phase error, etc
        (0..CUTOFF_TEST_INPUT.len()).for_each(|i| { let expected = CUTOFF_TEST_OUTPUT[i]; let rel_err = (out[i] - expected).abs() / expected.abs().max(1e-4); assert!(rel_err < 0.05); });
        // Check approximate attenuation at cutoff frequency; should be -3dB or 1/sqrt(2) magnitude
        let maxmag = out.iter().fold(0.0_f32, |a, b| a.abs().max(b.abs()));
        let attenuation_rel_err = (maxmag - (libm::sqrtf(2.0) / 2.0)).abs() / (libm::sqrtf(2.0) / 2.0);
        println!("order {order} attenuation rel err {attenuation_rel_err}");
        assert!(attenuation_rel_err < 0.05);

        // Check convergence of step responses at min and max tabulated cutoff
        let mut filtermin = butter4(MIN_CUTOFF_RATIO).unwrap();
        (0..309).for_each(|_| {filtermin.update(1.0);});
        let step_min_final = filtermin.update(1.0);
        let step_min_rel_err = (step_min_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
        println!("order {order} step min rel err {step_min_rel_err}");
        assert!(step_min_rel_err < 1e-4);


    // Check response of staged filter
    let freq = 0.17;
    let mut filter_2stage = butter4_2stage(freq).unwrap();
    let mut maxmag_2stage = 0.0;
    for i in 0..99999 {
        let u = libm::sin((i as f64) * 2.0 * core::f64::consts::PI * freq) as f32;
        let v = filter_2stage.update(u);
        maxmag_2stage = v.abs().max(maxmag_2stage);
    }
    let attenuation_2stage_rel_err = (maxmag_2stage - (libm::sqrtf(2.0) / 2.0)).abs() / (libm::sqrtf(2.0) / 2.0);
    println!("order {order} attenuation 2stage rel err {attenuation_2stage_rel_err}");
    assert!(attenuation_2stage_rel_err < 0.05);

    let mut filtermin_2stage = butter4_2stage(MIN_CUTOFF_RATIO).unwrap();
    (0..99999).for_each(|_| {filtermin_2stage.update(1.0);});
    let step_min_2stage_final = filtermin_2stage.update(1.0);
    let step_min_2stage_rel_err = (step_min_2stage_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
    println!("order {order} step min 2stage rel err {step_min_2stage_rel_err}");
    assert!(step_min_2stage_rel_err < 2e-4);  // 1e-4 per stage
    


                let mut filtermax = butter4(MAX_CUTOFF_RATIO).unwrap();
        (0..19).for_each(|_| {filtermax.update(1.0);});
        let step_max_final = filtermax.update(1.0);
        let step_max_rel_err = (step_max_final - STEP_TEST_MAX_OUTPUT).abs() / STEP_TEST_MAX_OUTPUT;
        println!("order {order} step max rel err {step_max_rel_err}");
        assert!(step_max_rel_err < 1e-6);
    }
}
