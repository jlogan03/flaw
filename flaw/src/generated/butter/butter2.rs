//! Butterworth filter of order 2.
//! Region of validity: cutoff ratio from 1.00e-03 to 4.00e-01 .
//! This file is autogenerated.
#![allow(clippy::style)]

use crate::{SisoIirFilter, StagedSisoIirFilter};

/// Minimum tabulated cutoff ratio
#[allow(dead_code)]
pub const MIN_CUTOFF_RATIO: f64 = 0.001;

/// Maximum tabulated cutoff ratio
#[allow(dead_code)]
pub const MAX_CUTOFF_RATIO: f64 = 0.4;

/// Initialise a Butterworth filter of order 2 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 1.00e-03 to 4.00e-01
pub fn butter2(cutoff_ratio: f64) -> Result<SisoIirFilter<2>, &'static str> {
    let avals = &[&AVALS[0][..], &AVALS[1][..]];
    let cvals = &[&CVALS[0][..], &CVALS[1][..]];
    SisoIirFilter::new_interpolated(cutoff_ratio, &LOG10_CUTOFF_RATIOS, avals, cvals, &DVALS)
}

/// Initialise a two-stage Butterworth filter of combined order 2*2 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 7.63e-04 to 3.75e-01
pub fn butter2_2stage(cutoff_ratio: f64) -> Result<StagedSisoIirFilter<2, 2>, &'static str> {
    // Look up the per-stage cutoff ratio corresponding to the desired combined cutoff
    let log10_root_cutoff_ratio = libm::log10(cutoff_ratio);

    if log10_root_cutoff_ratio < LOG10_ROOT2_CUTOFF_RATIOS[0]
        || log10_root_cutoff_ratio > *LOG10_ROOT2_CUTOFF_RATIOS.last().ok_or("Table size error")?
    {
        return Err("Selected cutoff ratio is outside the grid");
    }

    let log10_cutoff_ratio = interpn::MulticubicRectilinear::<'_, _, 2>::new(
        &[&LOG10_ROOT2_CUTOFF_RATIOS],
        &LOG10_CUTOFF_RATIOS,
        true,
    )?
    .interp_one(&[log10_root_cutoff_ratio])?;
    let cutoff_ratio = libm::pow(10.0, log10_cutoff_ratio);
    let filt = butter2(cutoff_ratio)?;
    Ok(StagedSisoIirFilter::new([filt, filt]))
}

/// [dimensionless] Log base-10 of cutoff ratios, to improve float precision during interpolation
#[rustfmt::skip]
static LOG10_CUTOFF_RATIOS: [f64; 50] = [-3.0, -2.946896734870858, -2.893793469741716, -2.840690204612574, -2.7875869394834316, -2.7344836743542897, -2.6813804092251474, -2.6282771440960055, -2.5751738789668632, -2.5220706138377214, -2.468967348708579, -2.415864083579437, -2.362760818450295, -2.309657553321153, -2.2565542881920106, -2.2034510230628688, -2.1503477579337265, -2.0972444928045846, -2.0441412276754423, -1.9910379625463004, -1.9379346974171583, -1.8848314322880162, -1.831728167158874, -1.778624902029732, -1.72552163690059, -1.6724183717714478, -1.6193151066423057, -1.5662118415131636, -1.5131085763840215, -1.4600053112548794, -1.4069020461257373, -1.3537987809965952, -1.3006955158674531, -1.247592250738311, -1.194488985609169, -1.1413857204800268, -1.0882824553508847, -1.0351791902217427, -0.9820759250926008, -0.9289726599634585, -0.8758693948343166, -0.8227661297051743, -0.7696628645760324, -0.7165595994468901, -0.6634563343177482, -0.6103530691886059, -0.557249804059464, -0.5041465389303217, -0.4510432738011798, -0.3979400086720376];

/// [dimensionless] Log base-10 of root cutoff ratios, used to generate multi-stage filters
#[rustfmt::skip]
static LOG10_ROOT2_CUTOFF_RATIOS: [f64; 50] = [-3.11724049102547, -3.045861709241996, -2.98943338585525, -2.9363387970680357, -2.8832352389726217, -2.8301315997136727, -2.77702785679974, -2.723923981522062, -2.6708199372042305, -2.617715677020349, -2.5646111411627395, -2.51150625326267, -2.458400915790634, -2.4052950042028836, -2.3521883594536255, -2.299080778442147, -2.245972001810912, -2.1928616983677496, -2.1397494451957177, -2.086634702261378, -2.033516779999653, -1.9803947979387315, -1.9272676318955269, -1.8741338465941448, -1.820991609704385, -1.7678385822064788, -1.7146717786124872, -1.6614873888378243, -1.6082805513324954, -1.5550450643494735, -1.501773018825745, -1.4484543321515428, -1.3950761569625567, -1.3416221328780695, -1.288071441711711, -1.2343976180373444, -1.1805670570826978, -1.1265371507255713, -1.0722539696100961, -1.0176493939445235, -0.9626375743112116, -0.9071105720857472, -0.8509329951121983, -0.7939355289893268, -0.7359082341347615, -0.6766003329876008, -0.6157621693230549, -0.5533634110437982, -0.48968153149545957, -0.42592385111679915];

/// State-Space `D` 1x1 matrix
#[rustfmt::skip]
static DVALS: [f64; 50] = [9.825916820482034e-06, 1.2540921319419766e-05, 1.6004915328769497e-05, 2.0423995778906876e-05, 2.6060738378017065e-05, 3.324957293004233e-05, 4.2416299490208846e-05, 5.410284093667309e-05, 6.899860883062768e-05, 8.798020921009676e-05, 0.00011216164824395617, 0.00014295773205870611, 0.00018216401079873917, 0.00023205741691071998, 0.0002955227167232561, 0.00037621105885221894, 0.0004787382887000849, 0.0006089323283465871, 0.0007741408117085385, 0.0009836123199594535, 0.001248966966018769, 0.001584774684093771, 0.0020092623041471484, 0.0025451731908792447, 0.0032208056950914186, 0.004071258621255938, 0.005139913009026412, 0.0064801793680348664, 0.00815753773343611, 0.010251894328205278, 0.012860273432942534, 0.016099857262828778, 0.020111382578862677, 0.02506290494126659, 0.031153957784939956, 0.038620176529982335, 0.047738547278707445, 0.05883360460158894, 0.07228518707874416, 0.08853882857086248, 0.10812062159925434, 0.13165961095950643, 0.15992277296294516, 0.19387100196459084, 0.23475044350569219, 0.28424442777095515, 0.34473238840201287, 0.4197449364904119, 0.5147939455180692, 0.6389455251590223];

/// State-Space `A` matrix, first row
#[rustfmt::skip]
static AVALS: [[f64; 50]; 2] = [[1.9911142922016536, 1.9899585944077747, 1.9886525892484335, 1.9871767305761452, 1.9855089315264647, 1.9836242347362567, 1.9814944399628367, 1.9790876836900848, 1.976367964657467, 1.9732946085358165, 1.9698216642008386, 1.9658972232265146, 1.9614626533463555, 1.9564517357292128, 1.9507896950176706, 1.9443921102261488, 1.9371636938586492, 1.9289969260762225, 1.919770530550757, 1.9093477789576923, 1.897574612111498, 1.884277567818653, 1.8692615089572495, 1.8523071504819093, 1.8331683914047883, 1.811569467673282, 1.7872019544330635, 1.7597216612321886, 1.7287454803900155, 1.6938482649543751, 1.6545598245023085, 1.6103621279042581, 1.5606867816941594, 1.5049127954844572, 1.442364530243139, 1.372309521952284, 1.2939555441755959, 1.2064457701409679, 1.1088501568334068, 1.0001501192701805, 0.8792120761188423, 0.7447433430358039, 0.5952208107323009, 0.4287783155922266, 0.24303165120907183, 0.034809371246539045, -0.2002584188222458, -0.46835949486157324, -0.7783875761848722, -1.1429805025399007], [-0.9911535958689355, -0.9900087580930523, -0.9887166089097486, -0.9872584265592609, -0.9856131744799768, -0.9837572330279769, -0.9816641051607975, -0.9793040950538314, -0.9766439590927894, -0.9736465293726569, -0.9702703107938144, -0.9664690541547495, -0.9621913093895504, -0.9573799653968557, -0.9519717858845637, -0.9458969544615577, -0.9390786470134495, -0.9314326553896088, -0.9228670937975912, -0.91328222823753, -0.902570479975573, -0.8906166665550281, -0.8772985581738381, -0.8624878432454263, -0.8460516141851538, -0.8278545021583059, -0.8077616064691692, -0.7856423787043282, -0.76137563132376, -0.7348558422671962, -0.7060009182340787, -0.6747615569555733, -0.6411323120096102, -0.6051644152495236, -0.5669803613828988, -0.5267902280722134, -0.4849097332904257, -0.4417801885473237, -0.3979909051483834, -0.35430543355363037, -0.31169456251585964, -0.2713817868738296, -0.23491190258408173, -0.20426232345059003, -0.18203342523184066, -0.17178708233035944, -0.1786711347858055, -0.21062025110007437, -0.2807882058874046, -0.41280159809618844]];

/// State-Space `C` vector
#[rustfmt::skip]
static CVALS: [[f64; 50]; 2] = [[3.921635705621048e-05, 5.003775680021059e-05, 6.38380469667984e-05, 8.14340807150429e-05, 0.00010386530556776152, 0.00013245380451874724, 0.000168880260584065, 0.00021527994802375962, 0.00027436385776003977, 0.0003495712909123307, 0.00044526174109133117, 0.0005669556726103826, 0.0007216359255629873, 0.0009181239699252556, 0.0011675481038738666, 0.0014839239323165177, 0.0018848710091299947, 0.0023924932462621776, 0.0030344543402317714, 0.0038452826383889123, 0.004867941938120677, 0.006155704755472327, 0.0077743612948353155, 0.009804788882438971, 0.012345890585280954, 0.015517885055780754, 0.019465888593400756, 0.0243636707386706, 0.030417381954660906, 0.03786894207673666, 0.046998638620146166, 0.05812631492638133, 0.07161033411015053, 0.0878432962206559, 0.10724327925556942, 0.13023918905153756, 0.1572486524795872, 0.18864676261691105, 0.22472381518648593, 0.26562977709691515, 0.31130219938604886, 0.36137184072778905, 0.41503490850345226, 0.4708696855937362, 0.5265526749186347, 0.5783832253529495, 0.6204292137858223, 0.6428983465554713, 0.6288786795496815, 0.5475887728761645], [8.692403115220801e-08, 1.2529937863832102e-07, 1.805897190208676e-07, 2.6023384217028857e-07, 3.749312959675049e-07, 5.400650650219652e-07, 7.777408069205912e-07, 1.1197072533430632e-06, 1.6115343303887546e-06, 2.3185838592057885e-06, 3.33453094314632e-06, 4.793507971820321e-06, 6.8873827246481334e-06, 9.890295138651178e-06, 1.419342831475998e-05, 2.0354164049147193e-05, 2.9165384274075013e-05, 4.175287280214831e-05, 5.971173061697127e-05, 8.529666866499751e-05, 0.00012168625202557334, 0.00017334793770537897, 0.0002465393817258114, 0.0003499922547917254, 0.0004958378377825875, 0.0007008488421983926, 0.000988088619743456, 0.0013890758349012437, 0.0019465872915937982, 0.0027182298868176965, 0.0037809085805437775, 0.005236292509399937, 0.007217325368366653, 0.009895726728030598, 0.013490275541527128, 0.018275444927563795, 0.02458966105011704, 0.032842083667780284, 0.043516340044454545, 0.057169040527732494, 0.07442001175093196, 0.09592959047820235, 0.12235501009969757, 0.1542704606536096, 0.19201801619965733, 0.2354149068555202, 0.28313866136880417, 0.3313381525688166, 0.37024587715435225, 0.3751877912769695]];

#[cfg(feature = "std")]
#[cfg(test)]
#[rustfmt::skip]
mod test {
    use super::*;
    static CUTOFF_TEST_INPUT: [f32; 101] = [0.0, 0.5877852522924732, -0.9510565162951536, 0.9510565162951535, -0.5877852522924728, -4.898587196589413e-16, 0.5877852522924736, -0.9510565162951538, 0.9510565162951533, -0.5877852522924725, -9.797174393178826e-16, 0.587785252292474, -0.951056516295154, 0.9510565162951532, -0.587785252292472, -1.4695761589768238e-15, 0.5877852522924744, -0.9510565162951541, 0.951056516295153, -0.5877852522924716, -1.959434878635765e-15, 0.5877852522924748, -0.9510565162951542, 0.9510565162951529, -0.5877852522924712, -2.4492935982947065e-15, 0.5877852522924751, -0.9510565162951544, 0.9510565162951528, -0.5877852522924708, -2.9391523179536475e-15, 0.5877852522924756, -0.9510565162951545, 0.9510565162951525, -0.5877852522924705, -3.429011037612589e-15, 0.587785252292476, -0.9510565162951546, 0.9510565162951524, -0.58778525229247, -3.91886975727153e-15, 0.5877852522924764, -0.9510565162951549, 0.9510565162951523, -0.5877852522924697, -4.408728476930472e-15, 0.5877852522924768, -0.951056516295155, 0.9510565162951521, -0.5877852522924693, -4.898587196589413e-15, 0.5877852522924887, -0.9510565162951552, 0.9510565162951563, -0.5877852522924688, -1.9599300631450357e-14, 0.5877852522924776, -0.9510565162951509, 0.9510565162951519, -0.5877852522924569, -5.878304635907295e-15, 0.5877852522924665, -0.9510565162951554, 0.9510565162951473, -0.587785252292468, 7.842691359635767e-15, 0.5877852522924784, -0.95105651629516, 0.9510565162951515, -0.5877852522924791, -6.858022075225178e-15, 0.5877852522924902, -0.9510565162951558, 0.9510565162951558, -0.5877852522924673, -2.1558735510086122e-14, 0.5877852522924791, -0.9510565162951515, 0.9510565162951512, -0.5877852522924554, -7.83773951454306e-15, 0.587785252292468, -0.9510565162951561, 0.9510565162951466, -0.5877852522924665, 5.883256481000002e-15, 0.5877852522924799, -0.9510565162951606, 0.9510565162951509, -0.5877852522924776, -8.817456953860943e-15, 0.5877852522924918, -0.9510565162951563, 0.9510565162951552, -0.5877852522924657, -2.3518170388721888e-14, 0.5877852522924807, -0.9510565162951521, 0.9510565162951506, -0.5877852522924538, -9.797174393178826e-15];
    static CUTOFF_TEST_OUTPUT: [f32; 101] = [0.0, 0.3755627567067427, -0.28580870024257504, -0.06046968287379362, 0.41920850528282105, -0.597637374463856, 0.5100379256850617, -0.19280553319986204, -0.2222820541365811, 0.5657650347226962, -0.6983522246845354, 0.5646542662393133, -0.21365569445033594, -0.2209964390154373, 0.5729025815902173, -0.7070410055666212, 0.5716389826249799, -0.218052346461291, -0.21885445357671462, 0.5722692789734278, -0.707201368035627, 0.5720837021326813, -0.21849445430421283, -0.21853271385571893, 0.5720840395695259, -0.7071224576796631, 0.5720699762563267, -0.2185113402162075, -0.21850774752384694, 0.572062474070433, -0.7071081148763674, 0.5720624849842976, -0.2185086985704603, -0.21850767446436525, 0.5720613000892838, -0.7071068031978743, 0.5720614703826485, -0.2185080803635357, -0.21850796223364444, 0.5720613738071527, -0.7071067686643426, 0.572061400480641, -0.21850801472240117, -0.21850800840452111, 0.5720613994827992, -0.7071067789516946, 0.5720614016399355, -0.21850801180081653, -0.2185080122223938, 0.5720614026405184, -0.7071067809848819, 0.5720614026603249, -0.21850801212778392, -0.2185080122698848, 0.5720614028297781, -0.7071067811816037, 0.5720614028070218, -0.2185080122142693, -0.21850801223159488, 0.5720614028217192, -0.7071067811881777, 0.5720614028178805, -0.21850801222397526, -0.2185080122249995, 0.5720614028181716, -0.707106781186854, 0.5720614028178498, -0.21850801222446548, -0.21850801222442195, 0.5720614028177091, -0.7071067811865845, 0.5720614028177146, -0.21850801222441385, -0.21850801222440963, 0.5720614028176896, -0.7071067811865587, 0.5720614028176747, -0.21850801222439975, -0.21850801222441385, 0.5720614028176931, -0.7071067811865398, 0.5720614028176698, -0.21850801222441035, -0.21850801222441552, 0.5720614028176834, -0.7071067811865365, 0.572061402817688, -0.21850801222441152, -0.21850801222441718, 0.5720614028176814, -0.7071067811865545, 0.5720614028176908, -0.21850801222439886, -0.21850801222441707, 0.5720614028176918, -0.7071067811865578, 0.5720614028176725, -0.21850801222439714, -0.21850801222441607, 0.5720614028176945, -0.70710678118654];
    const STEP_TEST_MIN_OUTPUT: f32 = 1.000000000001043;
    const STEP_TEST_MAX_OUTPUT: f32 = 1.1865342980351867;

    #[test]
    fn test() {
        let order = 2;
        println!("order {order}");
        let mut filter = butter2(0.4).unwrap();
        let out = (0..CUTOFF_TEST_INPUT.len()).map(|i| {filter.update(CUTOFF_TEST_INPUT[i])}).collect::<Vec<f32>>();

        // Check overall match to reference output to catch phase error, etc
        (0..CUTOFF_TEST_INPUT.len()).for_each(|i| { let expected = CUTOFF_TEST_OUTPUT[i]; let rel_err = (out[i] - expected).abs() / expected.abs().max(1e-4); assert!(rel_err < 0.05); });
        // Check approximate attenuation at cutoff frequency; should be -3dB or 1/sqrt(2) magnitude
        let maxmag = out.iter().fold(0.0_f32, |a, b| a.abs().max(b.abs()));
        let attenuation_rel_err = (maxmag - 0.707).abs() / 0.707;
        println!("order {order} attenuation rel err {attenuation_rel_err}");
        assert!(attenuation_rel_err < 0.05);

        // Check convergence of step responses at min and max tabulated cutoff
        let mut filtermin = butter2(MIN_CUTOFF_RATIO).unwrap();
        (0..9999).for_each(|_| {filtermin.update(1.0);});
        let step_min_final = filtermin.update(1.0);
        let step_min_rel_err = (step_min_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
        println!("order {order} step min rel err {step_min_rel_err}");
        assert!(step_min_rel_err < 1e-4);


    // Check response of staged filter
    let mut filter_2stage = butter2_2stage(0.1).unwrap();
    let mut maxmag_2stage = 0.0;
    for i in 0..99999 {
        let u = libm::sinf((i as f32) * 2.0 * core::f32::consts::PI / 10.0);
        let v = filter_2stage.update(u);
        maxmag_2stage = v.abs().max(maxmag_2stage);
    }
    let attenuation_2stage_rel_err = (maxmag_2stage - 0.707).abs() / 0.707;
    println!("order {order} attenuation 2stage rel err {attenuation_rel_err}");
    assert!(attenuation_2stage_rel_err < 0.05);

    let mut filtermin_2stage = butter2_2stage(MIN_CUTOFF_RATIO).unwrap();
    (0..99999).for_each(|_| {filtermin_2stage.update(1.0);});
    let step_min_2stage_final = filtermin_2stage.update(1.0);
    let step_min_2stage_rel_err = (step_min_2stage_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
    println!("order {order} step min 2stage rel err {step_min_2stage_rel_err}");
    assert!(step_min_2stage_rel_err < 2e-4);  // 1e-4 per stage
    


                let mut filtermax = butter2(MAX_CUTOFF_RATIO).unwrap();
        (0..1).for_each(|_| {filtermax.update(1.0);});
        let step_max_final = filtermax.update(1.0);
        let step_max_rel_err = (step_max_final - STEP_TEST_MAX_OUTPUT).abs() / STEP_TEST_MAX_OUTPUT;
        println!("order {order} step max rel err {step_max_rel_err}");
        assert!(step_max_rel_err < 1e-6);
    }
}
