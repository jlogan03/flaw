//! Butterworth filter of order 6.
//! Region of validity: cutoff ratio from 1.00e-01 to 4.00e-01 .
//! This file is autogenerated.
#![allow(clippy::style)]

use crate::{SisoIirFilter, StagedSisoIirFilter};

/// Minimum tabulated cutoff ratio
#[allow(dead_code)]
pub const MIN_CUTOFF_RATIO: f64 = 0.1;

/// Maximum tabulated cutoff ratio
#[allow(dead_code)]
pub const MAX_CUTOFF_RATIO: f64 = 0.4;

/// Initialise a Butterworth filter of order 6 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 1.00e-01 to 4.00e-01
pub fn butter6(cutoff_ratio: f64) -> Result<SisoIirFilter<6>, &'static str> {
    let avals = &[
        &AVALS[0][..],
        &AVALS[1][..],
        &AVALS[2][..],
        &AVALS[3][..],
        &AVALS[4][..],
        &AVALS[5][..],
    ];
    let cvals = &[
        &CVALS[0][..],
        &CVALS[1][..],
        &CVALS[2][..],
        &CVALS[3][..],
        &CVALS[4][..],
        &CVALS[5][..],
    ];
    SisoIirFilter::new_interpolated(cutoff_ratio, &LOG10_CUTOFF_RATIOS, avals, cvals, &DVALS)
}

/// Initialise a two-stage Butterworth filter of combined order 2*6 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 9.37e-02 to 3.92e-01
pub fn butter6_2stage(cutoff_ratio: f64) -> Result<StagedSisoIirFilter<6, 2>, &'static str> {
    // Look up the per-stage cutoff ratio corresponding to the desired combined cutoff
    let log10_root_cutoff_ratio = libm::log10(cutoff_ratio);

    if log10_root_cutoff_ratio < LOG10_ROOT2_CUTOFF_RATIOS[0]
        || log10_root_cutoff_ratio > *LOG10_ROOT2_CUTOFF_RATIOS.last().ok_or("Table size error")?
    {
        return Err("Selected cutoff ratio is outside the grid");
    }

    let log10_cutoff_ratio = interpn::MulticubicRectilinear::<'_, _, 6>::new(
        &[&LOG10_ROOT2_CUTOFF_RATIOS],
        &LOG10_CUTOFF_RATIOS,
        true,
    )?
    .interp_one(&[log10_root_cutoff_ratio])?;
    let cutoff_ratio = libm::pow(10.0, log10_cutoff_ratio);
    let filt = butter6(cutoff_ratio)?;
    Ok(StagedSisoIirFilter::new([filt, filt]))
}

/// [dimensionless] Log base-10 of cutoff ratios, to improve float precision during interpolation
#[rustfmt::skip]
static LOG10_CUTOFF_RATIOS: [f64; 30] = [-1.0, -0.9792393106438634, -0.9584786212877268, -0.9377179319315901, -0.9169572425754535, -0.8961965532193168, -0.8754358638631802, -0.8546751745070436, -0.8339144851509069, -0.8131537957947703, -0.7923931064386337, -0.7716324170824971, -0.7508717277263603, -0.7301110383702238, -0.7093503490140871, -0.6885896596579505, -0.6678289703018139, -0.6470682809456773, -0.6263075915895406, -0.6055469022334039, -0.5847862128772674, -0.5640255235211307, -0.543264834164994, -0.5225041448088574, -0.5017434554527208, -0.48098276609658425, -0.46022207674044757, -0.43946138738431095, -0.4187006980281742, -0.3979400086720376];

/// [dimensionless] Log base-10 of root cutoff ratios, used to generate multi-stage filters
#[rustfmt::skip]
static LOG10_ROOT2_CUTOFF_RATIOS: [f64; 30] = [-1.028240181110238, -1.0081388005623777, -0.9883519132363907, -0.9671159037718018, -0.9461054064804808, -0.9250707966720431, -0.9040098489397776, -0.8829201548458857, -0.8617991137625409, -0.840643925536519, -0.8194515863575892, -0.7982188900311664, -0.7769424381856961, -0.7556186651005473, -0.7342438863175542, -0.7128143857440739, -0.6913265646050448, -0.6697771885750617, -0.6481637875423053, -0.6264852844009272, -0.6047439666208521, -0.5829437900342788, -0.5610867226743761, -0.5391762867323948, -0.5172180663945971, -0.4952202797718256, -0.47319459679335535, -0.45115745202589114, -0.429132455587041, -0.40710080633416795];

/// State-Space `D` 1x1 matrix
#[rustfmt::skip]
static DVALS: [f64; 30] = [0.0003405376527201276, 0.00043467462999334603, 0.0005540760971652261, 0.0007053073385607884, 0.0008965845072872687, 0.0011381780827511981, 0.0014429136176214222, 0.0018267937137387018, 0.002309771509319929, 0.0029167142080926186, 0.0036786059920169752, 0.004634053944392626, 0.005831179642468886, 0.007330004650250088, 0.009205472796364224, 0.011551299499758503, 0.014484903768979956, 0.018153769527581895, 0.02274371093560123, 0.02848969828536196, 0.03569016237612605, 0.04472607508341722, 0.05608666277292274, 0.07040444282140103, 0.08850353485869415, 0.11146713697633155, 0.14073308776619023, 0.17823126138681236, 0.2265843866431439, 0.2894069170783345];

/// State-Space `A` matrix, first row
#[rustfmt::skip]
static AVALS: [[f64; 30]; 6] = [[3.5794347983311923, 3.461577491716583, 3.338035675366921, 3.208540474397342, 3.072810438382155, 2.930550835678174, 2.781452866799632, 2.6251927815088614, 2.4614308817959474, 2.289810390295115, 2.1099561610321635, 1.921473206882535, 1.723945015994902, 1.5169316280677716, 1.2999674412835378, 1.0725587226516815, 0.8341807995333852, 0.5842749196601119, 0.32224478300154913, 0.04745277407239176, -0.24078403872300425, -0.5431980146556465, -0.8605749623382152, -1.1937577617156179, -1.5436491301872883, -1.9112128872253868, -2.2974728398843074, -2.7035081526353237, -3.1304438261841856, -3.5794347983311914], [-5.658667165933626, -5.336460355946218, -5.0111516012987884, -4.683731921050836, -4.355338951414002, -4.02727245115951, -3.7010114564887897, -3.378233335092203, -3.060835046064814, -2.7509569837269776, -2.4510098726194363, -2.1637052921278324, -1.8920905472961085, -1.6395887733322632, -1.4100453720980068, -1.2077821376820264, -1.0376607443271832, -0.9051576538414472, -0.8164529619446004, -0.7785362538495797, -0.7993331858364533, -0.8878572516464669, -1.0543920159325018, -1.3107099611410447, -1.6703349125183933, -2.148855615369547, -2.7642981545893024, -3.537564061793949, -4.492938432520066, -5.658667165933624], [4.96541522877857, 4.585499231453558, 4.212161842099501, 3.8468967838954495, 3.4912285186658445, 3.1466926600467406, 2.8148116871436075, 2.4970651344757044, 2.19485326543123, 1.9094530193203783, 1.6419647399128605, 1.3932478238807842, 1.1638429409319404, 0.953877833264116, 0.7629528457317412, 0.5900011957883311, 0.433117463159885, 0.28934572585275026, 0.1544160032282853, 0.02241392989385992, -0.11463647980524277, -0.2673039979046765, -0.44943167267847484, -0.6790178208723634, -0.9793631523114463, -1.3805744473166621, -1.9215475134435516, -2.652595671823705, -3.638947837412629, -4.965415228778568], [-2.529494905841447, -2.294461074213177, -2.0686460000083415, -1.8528592608742356, -1.6478577070412619, -1.4543323132984636, -1.2728951377028188, -1.1040668994449852, -0.9482658458773636, -0.8057987804167798, -0.6768553849283391, -0.5615073153820058, -0.45971401141858814, -0.3713377873621757, -0.2961716346562742, -0.23398436682508522, -0.184589429615339, -0.14794610556885157, -0.12430529864106801, -0.11441709319365231, -0.11982460344858889, -0.14327942556897788, -0.18933006354430537, -0.26515880201337405, -0.3817790043803683, -0.5557606226720262, -0.8117378242702082, -1.1860867566473383, -1.7323721489709372, -2.529494905841446], [0.7052741145099006, 0.6297850028493712, 0.5586326725698828, 0.4919763226287034, 0.42993908540394277, 0.3726048100209993, 0.3200152742949423, 0.272167904339474, 0.2290140593148076, 0.19045790301715793, 0.15635582845839047, 0.12651631811965233, 0.10069999915380493, 0.07861947134541103, 0.05993821847325929, 0.04426751817450393, 0.031159674855299663, 0.02009500957224534, 0.010458682777297171, 0.001501331012019305, -0.00772577135396883, -0.018475481481514167, -0.03247221365819835, -0.05217815416791238, -0.08121644172041001, -0.12504626497873392, -0.1920471467688369, -0.29527706071641674, -0.45535735811484546, -0.7052741145099002], [-0.08375647961867896, -0.07375947217969195, -0.06449345894774988, -0.055962068664313316, -0.04816279246306403, -0.04108693858401672, -0.03471970557434428, -0.029040383466128847, -0.024022691196282638, -0.01963525780682187, -0.015842255344725584, -0.012604193814261633, -0.009878894483959334, -0.007622669598865431, -0.005791757701567561, -0.004344100091949245, -0.0032416048207645795, -0.002453145440049876, -0.0019587082999423257, -0.0017553781982044378, -0.0018663129048093461, -0.002354634081419787, -0.0033454893153598586, -0.0050618406593520475, -0.00788358983851877, -0.012446928922860256, -0.01981413807997166, -0.031769025139261296, -0.0513411419585473, -0.08375647961867891]];

/// State-Space `C` vector
#[rustfmt::skip]
static CVALS: [[f64; 30]; 6] = [[0.003262158240609213, 0.004112707695365277, 0.00517398236219695, 0.006494851174026489, 0.008134541276607652, 0.010164557228064294, 0.012670877924005865, 0.015756447953044816, 0.019543971978852083, 0.02417900774776758, 0.0298333333289679, 0.036708534159754516, 0.04503971093681849, 0.055099143789348735, 0.06719965169508016, 0.08169724403497901, 0.09899245122105159, 0.11952940939774748, 0.14379130780870014, 0.17229010492829763, 0.2055473528171529, 0.2440613353118517, 0.2882531989340523, 0.3383808068510953, 0.3944028045490413, 0.45576539316670706, 0.5210680797812649, 0.5875379001071497, 0.6501966255821032, 0.7005283126020669], [0.0031810755565904207, 0.004200495519205108, 0.005534582135927486, 0.007276139582643251, 0.009543838181486458, 0.012488918004090523, 0.016303464434780764, 0.02123057028599156, 0.027576743055670476, 0.03572695780110119, 0.046162790276344005, 0.059484082122401215, 0.0764345747559324, 0.097931876420728, 0.1251019576309759, 0.1593180392935539, 0.202243140508272, 0.25587451947976403, 0.322586493875035, 0.40516521130403893, 0.5068241044467615, 0.631180756150762, 0.7821626121657728, 0.96378683780642, 1.1797224787246468, 1.4324802714242166, 1.7219681016911195, 2.042964415831994, 2.380736100689191, 2.7034463369097708], [0.008501663901191581, 0.01068669278163377, 0.013415380137403303, 0.016819391303583123, 0.02106187154698065, 0.02634505827384323, 0.032919802466847885, 0.04109749716523033, 0.05126503972602944, 0.06390361291298947, 0.07961226117126355, 0.0991374644616237, 0.12341017011357117, 0.15359202195859822, 0.19113279759357668, 0.23784127051293671, 0.2959717401541348, 0.3683281061725596, 0.4583862116532796, 0.5704325318073045, 0.7097118529440444, 0.8825660429879623, 1.0965261327934668, 1.3602829850837, 1.6833935962839663, 2.0754540585015615, 2.5442364404674485, 3.0918497551979094, 3.7071589690963425, 4.351112828192072], [0.004246676532999148, 0.0055227754314324425, 0.007164954155377313, 0.00927277484439691, 0.011971323918961913, 0.015417382077234813, 0.01980702653632584, 0.02538500323462745, 0.03245629520573024, 0.04140042836968395, 0.05268920560552828, 0.06690875397623809, 0.0847870196522915, 0.10722816204557299, 0.1353556920195803, 0.17056666899691963, 0.21459979640995025, 0.26962076341072816, 0.3383285002539624, 0.42408576581665414, 0.5310758760881557, 0.6644827999053513, 0.8306810501670556, 1.0373982846060736, 1.2937642314579167, 1.610058009191539, 1.9967579460266978, 2.462071182050737, 3.0062373188349136, 3.6090504337100926], [0.0022833983078002335, 0.002881799343048985, 0.003633981593957857, 0.004578838542112905, 0.005764983766774045, 0.007253159124800764, 0.00911923610285556, 0.011457956899160997, 0.014387599205358622, 0.018055796520329383, 0.022646807439555664, 0.028390607109368162, 0.03557427763987562, 0.0445563089920626, 0.055784596417803464, 0.06981914435909573, 0.08736076750563146, 0.10928741733792047, 0.13670013487146135, 0.17098096217973063, 0.21386524022265235, 0.26753011472855887, 0.3346987185405988, 0.4187530830567652, 0.5238332669712634, 0.6548642727112262, 0.8173711386356763, 1.0167599653307968, 1.2563294521669688, 1.5323302952945446], [0.00031201541775068145, 0.0004026132587151339, 0.0005183418131387711, 0.0006658368808508055, 0.0008534024937371934, 0.0010914138297675258, 0.0013928160816483945, 0.0017737429237782163, 0.002254284581617565, 0.0028594437726679, 0.0036203285765788046, 0.004575645430331758, 0.0057735740340639245, 0.007274130446643085, 0.00915215692839931, 0.011501119498539469, 0.01443794943509412, 0.01810923569064559, 0.022699162640220177, 0.028439688090118414, 0.035623553365508744, 0.044620761542697666, 0.05589902544188174, 0.07004806675012863, 0.08780580929060916, 0.11007971344515242, 0.13794458293277018, 0.17256902796321247, 0.21495128548290787, 0.2651672125265583]];

#[cfg(feature = "std")]
#[cfg(test)]
#[rustfmt::skip]
mod test {
    use super::*;
    static CUTOFF_TEST_INPUT: [f32; 101] = [0.0, 0.5877852522924732, -0.9510565162951536, 0.9510565162951535, -0.5877852522924728, -4.898587196589413e-16, 0.5877852522924736, -0.9510565162951538, 0.9510565162951533, -0.5877852522924725, -9.797174393178826e-16, 0.587785252292474, -0.951056516295154, 0.9510565162951532, -0.587785252292472, -1.4695761589768238e-15, 0.5877852522924744, -0.9510565162951541, 0.951056516295153, -0.5877852522924716, -1.959434878635765e-15, 0.5877852522924748, -0.9510565162951542, 0.9510565162951529, -0.5877852522924712, -2.4492935982947065e-15, 0.5877852522924751, -0.9510565162951544, 0.9510565162951528, -0.5877852522924708, -2.9391523179536475e-15, 0.5877852522924756, -0.9510565162951545, 0.9510565162951525, -0.5877852522924705, -3.429011037612589e-15, 0.587785252292476, -0.9510565162951546, 0.9510565162951524, -0.58778525229247, -3.91886975727153e-15, 0.5877852522924764, -0.9510565162951549, 0.9510565162951523, -0.5877852522924697, -4.408728476930472e-15, 0.5877852522924768, -0.951056516295155, 0.9510565162951521, -0.5877852522924693, -4.898587196589413e-15, 0.5877852522924887, -0.9510565162951552, 0.9510565162951563, -0.5877852522924688, -1.9599300631450357e-14, 0.5877852522924776, -0.9510565162951509, 0.9510565162951519, -0.5877852522924569, -5.878304635907295e-15, 0.5877852522924665, -0.9510565162951554, 0.9510565162951473, -0.587785252292468, 7.842691359635767e-15, 0.5877852522924784, -0.95105651629516, 0.9510565162951515, -0.5877852522924791, -6.858022075225178e-15, 0.5877852522924902, -0.9510565162951558, 0.9510565162951558, -0.5877852522924673, -2.1558735510086122e-14, 0.5877852522924791, -0.9510565162951515, 0.9510565162951512, -0.5877852522924554, -7.83773951454306e-15, 0.587785252292468, -0.9510565162951561, 0.9510565162951466, -0.5877852522924665, 5.883256481000002e-15, 0.5877852522924799, -0.9510565162951606, 0.9510565162951509, -0.5877852522924776, -8.817456953860943e-15, 0.5877852522924918, -0.9510565162951563, 0.9510565162951552, -0.5877852522924657, -2.3518170388721888e-14, 0.5877852522924807, -0.9510565162951521, 0.9510565162951506, -0.5877852522924538, -9.797174393178826e-15];
    static CUTOFF_TEST_OUTPUT: [f32; 101] = [0.0, 0.17010911777007573, 0.1365178766125853, -0.2758226226829056, 0.12500969241519927, 0.15993667325805394, -0.3602533858437819, 0.3414318708175353, -0.11084618772932076, -0.20661827917659803, 0.44411813783985604, -0.47774028965057735, 0.28314454889856877, 0.056864574596477924, -0.3924929902177637, 0.574378603757669, -0.5184536662684898, 0.2414452351223319, 0.14647971190026834, -0.4875905989378392, 0.641409621716719, -0.5419553416347676, 0.22459926628426885, 0.1877683482667627, -0.5333498583158272, 0.6753476535674935, -0.5559404854843619, 0.21923792169312095, 0.20561875187292772, -0.5544955516701416, 0.6919214627279894, -0.5636612562519092, 0.21788545432782802, 0.21320079162969147, -0.5641499158491232, 0.6999016130363233, -0.5677646708790806, 0.2177760656880967, 0.21637396542278695, -0.5685257545253685, 0.7037118564388061, -0.5698955587112431, 0.2179647061064463, 0.21767715004985635, -0.5704947287719067, 0.7055180140251238, -0.5709831024228885, 0.21816286157487425, 0.2181991990635194, -0.5713737089154323, 0.7063682547820197, -0.57153031204086, 0.2183056492491836, 0.218401369924149, -0.571762713991341, 0.7067657868108507, -0.5718023251266052, 0.218395110381563, 0.21847591065110677, -0.5719332336684921, 0.7069504064043498, -0.5719361140604169, 0.21844713716518266, 0.21850130233739357, -0.572007180672379, 0.7070355703324883, -0.5720012982704662, 0.21847600745571139, 0.2185087273886095, -0.5720388543879917, 0.7070745882123162, -0.572032785223079, 0.21849151340568457, 0.21851012279357152, -0.5720522251377653, 0.7070923389916196, -0.5720478744114159, 0.21849964136570998, 0.2185098123722172, -0.5720577706759886, 0.7071003555055267, -0.5720550516365446, 0.21850382147791192, 0.21850922371479767, -0.572060020182487, 0.7071039478803812, -0.5720584412676083, 0.21850593814122726, 0.21850874558578834, -0.5720609063900093, 0.7071055443192281, -0.5720600311086134, 0.21850699604634716, 0.21850842986801217, -0.5720612415291583, 0.7071062473251536, -0.5720607717654101, 0.2185075188608988, 0.21850824069575298, -0.572061360605676, 0.7071065537690802];
    const STEP_TEST_MIN_OUTPUT: f32 = 0.9999998285690135;
    const STEP_TEST_MAX_OUTPUT: f32 = 0.9951136276647932;

    #[test]
    fn test() {
        let order = 6;
        println!("order {order}");
        let mut filter = butter6(0.4).unwrap();
        let out = (0..CUTOFF_TEST_INPUT.len()).map(|i| {filter.update(CUTOFF_TEST_INPUT[i])}).collect::<Vec<f32>>();

        // Check overall match to reference output to catch phase error, etc
        (0..CUTOFF_TEST_INPUT.len()).for_each(|i| { let expected = CUTOFF_TEST_OUTPUT[i]; let rel_err = (out[i] - expected).abs() / expected.abs().max(1e-4); assert!(rel_err < 0.05); });
        // Check approximate attenuation at cutoff frequency; should be -3dB or 1/sqrt(2) magnitude
        let maxmag = out.iter().fold(0.0_f32, |a, b| a.abs().max(b.abs()));
        let attenuation_rel_err = (maxmag - (libm::sqrtf(2.0) / 2.0)).abs() / (libm::sqrtf(2.0) / 2.0);
        println!("order {order} attenuation rel err {attenuation_rel_err}");
        assert!(attenuation_rel_err < 0.05);

        // Check convergence of step responses at min and max tabulated cutoff
        let mut filtermin = butter6(MIN_CUTOFF_RATIO).unwrap();
        (0..99).for_each(|_| {filtermin.update(1.0);});
        let step_min_final = filtermin.update(1.0);
        let step_min_rel_err = (step_min_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
        println!("order {order} step min rel err {step_min_rel_err}");
        assert!(step_min_rel_err < 1e-4);


    // Check response of staged filter
    let freq = 0.17;
    let mut filter_2stage = butter6_2stage(freq).unwrap();
    let mut maxmag_2stage = 0.0;
    for i in 0..99999 {
        let u = libm::sin((i as f64) * 2.0 * core::f64::consts::PI * freq) as f32;
        let v = filter_2stage.update(u);
        maxmag_2stage = v.abs().max(maxmag_2stage);
    }
    let attenuation_2stage_rel_err = (maxmag_2stage - (libm::sqrtf(2.0) / 2.0)).abs() / (libm::sqrtf(2.0) / 2.0);
    println!("order {order} attenuation 2stage rel err {attenuation_2stage_rel_err}");
    assert!(attenuation_2stage_rel_err < 0.05);

    let mut filtermin_2stage = butter6_2stage(MIN_CUTOFF_RATIO).unwrap();
    (0..99999).for_each(|_| {filtermin_2stage.update(1.0);});
    let step_min_2stage_final = filtermin_2stage.update(1.0);
    let step_min_2stage_rel_err = (step_min_2stage_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
    println!("order {order} step min 2stage rel err {step_min_2stage_rel_err}");
    assert!(step_min_2stage_rel_err < 2e-4);  // 1e-4 per stage
    


                let mut filtermax = butter6(MAX_CUTOFF_RATIO).unwrap();
        (0..19).for_each(|_| {filtermax.update(1.0);});
        let step_max_final = filtermax.update(1.0);
        let step_max_rel_err = (step_max_final - STEP_TEST_MAX_OUTPUT).abs() / STEP_TEST_MAX_OUTPUT;
        println!("order {order} step max rel err {step_max_rel_err}");
        assert!(step_max_rel_err < 1e-6);
    }
}
