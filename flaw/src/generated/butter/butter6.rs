//! Butterworth filter of order 6.
//! Region of validity: cutoff ratio from 1.00e-01 to 4.00e-01 .
//! This file is autogenerated.
#![allow(clippy::style)]

use crate::{SisoIirFilter, StagedSisoIirFilter};

/// Minimum tabulated cutoff ratio
#[allow(dead_code)]
pub const MIN_CUTOFF_RATIO: f64 = 0.1;

/// Maximum tabulated cutoff ratio
#[allow(dead_code)]
pub const MAX_CUTOFF_RATIO: f64 = 0.4;

/// Initialise a Butterworth filter of order 6 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 1.00e-01 to 4.00e-01
pub fn butter6(cutoff_ratio: f64) -> Result<SisoIirFilter<6>, &'static str> {
    let avals = &[
        &AVALS[0][..],
        &AVALS[1][..],
        &AVALS[2][..],
        &AVALS[3][..],
        &AVALS[4][..],
        &AVALS[5][..],
    ];
    let cvals = &[
        &CVALS[0][..],
        &CVALS[1][..],
        &CVALS[2][..],
        &CVALS[3][..],
        &CVALS[4][..],
        &CVALS[5][..],
    ];
    SisoIirFilter::new_interpolated(cutoff_ratio, &LOG10_CUTOFF_RATIOS, avals, cvals, &DVALS)
}

/// Initialise a two-stage Butterworth filter of combined order 2*6 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 9.38e-02 to 3.93e-01
pub fn butter6_2stage(cutoff_ratio: f64) -> Result<StagedSisoIirFilter<6, 2>, &'static str> {
    // Look up the per-stage cutoff ratio corresponding to the desired combined cutoff
    let log10_root_cutoff_ratio = libm::log10(cutoff_ratio);

    if log10_root_cutoff_ratio < LOG10_ROOT2_CUTOFF_RATIOS[0]
        || log10_root_cutoff_ratio > *LOG10_ROOT2_CUTOFF_RATIOS.last().ok_or("Table size error")?
    {
        return Err("Selected cutoff ratio is outside the grid");
    }

    let log10_cutoff_ratio = interpn::MulticubicRectilinear::<'_, _, 6>::new(
        &[&LOG10_ROOT2_CUTOFF_RATIOS],
        &LOG10_CUTOFF_RATIOS,
        true,
    )?
    .interp_one(&[log10_root_cutoff_ratio])?;
    let cutoff_ratio = libm::pow(10.0, log10_cutoff_ratio);
    let filt = butter6(cutoff_ratio)?;
    Ok(StagedSisoIirFilter::new([filt, filt]))
}

/// [dimensionless] Log base-10 of cutoff ratios, to improve float precision during interpolation
#[rustfmt::skip]
static LOG10_CUTOFF_RATIOS: [f64; 50] = [-1.0, -0.9877130614014702, -0.9754261228029403, -0.9631391842044105, -0.9508522456058807, -0.9385653070073507, -0.9262783684088209, -0.9139914298102911, -0.9017044912117612, -0.8894175526132314, -0.8771306140147015, -0.8648436754161717, -0.8525567368176419, -0.8402697982191121, -0.8279828596205822, -0.8156959210220524, -0.8034089824235224, -0.7911220438249926, -0.7788351052264628, -0.766548166627933, -0.7542612280294031, -0.7419742894308733, -0.7296873508323434, -0.7174004122338136, -0.7051134736352838, -0.692826535036754, -0.680539596438224, -0.6682526578396941, -0.6559657192411643, -0.6436787806426345, -0.6313918420441047, -0.6191049034455749, -0.606817964847045, -0.5945310262485151, -0.5822440876499853, -0.5699571490514554, -0.5576702104529256, -0.5453832718543958, -0.5330963332558659, -0.520809394657336, -0.5085224560588062, -0.4962355174602764, -0.48394857886174664, -0.47166164026321666, -0.4593747016646869, -0.44708776306615705, -0.43480082446762713, -0.4225138858690974, -0.4102269472705675, -0.3979400086720376];

/// [dimensionless] Log base-10 of root cutoff ratios, used to generate multi-stage filters
#[rustfmt::skip]
static LOG10_ROOT2_CUTOFF_RATIOS: [f64; 50] = [-1.0279630256918948, -1.0160743807591035, -1.0048020210131854, -0.9928521452805277, -0.9803523801784663, -0.9679281753467833, -0.955496278141903, -0.9430562763658151, -0.9306077381690677, -0.9181502114739865, -0.9056832234510647, -0.8932062800686662, -0.8807188657412591, -0.868220443109157, -0.8557104529911199, -0.8431883145633604, -0.8306534258334988, -0.8181051644980749, -0.8055428892976253, -0.7929659420170672, -0.7803736503221357, -0.7677653316785934, -0.75514029867215, -0.7424978661379935, -0.7298373606223907, -0.7171581785939206, -0.7044598272341583, -0.6917415857658433, -0.6790026991129522, -0.6662423992832047, -0.6534599052413903, -0.6406544226056742, -0.6278251433609036, -0.6149712460487798, -0.602091897375789, -0.5891862570259149, -0.5762534889223888, -0.5632927846424269, -0.550303408748054, -0.537284782289958, -0.5242366306412213, -0.5111592356978492, -0.4980538488991608, -0.4849233331668322, -0.47177308852989336, -0.45861135243072854, -0.4454439579402448, -0.4322755770988397, -0.4191118302700264, -0.405904479313081];

/// State-Space `D` 1x1 matrix
#[rustfmt::skip]
static DVALS: [f64; 50] = [0.0003405376527201276, 0.00039352370356609195, 0.0004545367889785129, 0.0005247577832758817, 0.0006055360401285223, 0.0006984127545325143, 0.0008051475036424017, 0.0009277484010363991, 0.001068506361264176, 0.0012300340436532603, 0.0014153101280944495, 0.0016277296730142082, 0.0018711614195316248, 0.002150013038977288, 0.002469305477259028, 0.002834757733527946, 0.00325288362774157, 0.0037311023687615647, 0.004277865039781145, 0.0049027994812280784, 0.00561687648522223, 0.0064326007354592275, 0.00736423055093991, 0.00842803124471858, 0.0096425678189957, 0.011029043821907518, 0.012611694535003732, 0.014418244301217905, 0.01648043981386365, 0.01883467366011859, 0.021522715465174994, 0.02459257176623205, 0.028099500452267792, 0.03210721148603068, 0.036689293003498664, 0.041930911186787184, 0.0479308440850875, 0.05480392454843042, 0.06268398661512288, 0.07172743435718756, 0.0821175840894817, 0.09406997235757984, 0.10783887646975436, 0.1237253659722761, 0.14208729853972124, 0.16335180086214054, 0.18803094638039755, 0.21674157439833514, 0.25023051397523666, 0.2894069170783345];

/// State-Space `A` matrix, first row
#[rustfmt::skip]
static AVALS: [[f64; 50]; 6] = [[3.5794347983311923, 3.51035427741206, 3.439320087630082, 3.3662780305422233, 3.291172430031193, 3.2139460861945164, 3.134540226442665, 3.052894453498924, 2.9689466899612755, 2.882633119052046, 2.7938881211447026, 2.7026442056191002, 2.608831937557069, 2.512379858749996, 2.4132144024495177, 2.311259801252572, 2.2064379874737186, 2.098668485322384, 1.9878682941719443, 1.873951762183643, 1.7568304495336795, 1.6364129804896006, 1.5126048835964063, 1.3853084192680907, 1.2544223941427002, 1.11984196165534, 0.9814584084224122, 0.8391589262220783, 0.6928263696128201, 0.5423389995687379, 0.38757021394458857, 0.22838826613601843, 0.06465597399556738, -0.1037695780693389, -0.2770373398217872, -0.45530259344257296, -0.6387272424130737, -0.8274800822450433, -1.0217370420085556, -1.2216813829583457, -1.4275038374976563, -1.6394026682528275, -1.8575836232115117, -2.082259758821796, -2.313651098886216, -2.5519840934003657, -2.797490838795815, -3.050408020283024, -3.3109755395005935, -3.5794347983311914], [-5.658667165933626, -5.468399517707633, -5.2769148626612905, -5.084401266629845, -4.891063346049205, -4.697123285265753, -4.502821913963437, -4.30841984944832, -4.114198709113869, -3.9204623990786063, -3.72753848575332, -3.5357796579710357, -3.3455652883147193, -3.1573031034219623, -2.9714309743516183, -2.7884188395860154, -2.6087707749371614, -2.43302722655343, -2.2617674254131073, -2.095612004176349, -1.9352258400829683, -1.7813211507700555, -1.634660873484209, -1.496062362225178, -1.3664014419322474, -1.2466168639658655, -1.1377152129017507, -1.0407763211014496, -0.9569592547098466, -0.8875089427108882, -0.8337635294946928, -0.7971625410851513, -0.779255965757908, -0.7817143612201449, -0.8063401127511582, -0.8550799795676589, -0.9300390799277809, -1.0334964787265004, -1.1679225539697575, -1.3359983296875035, -1.5406369713503578, -1.785007644027771, -2.0725619311256924, -2.4070629996059814, -2.792617672293593, -3.233711524415216, -3.7352470540553813, -4.302584878035786, -4.941587768635461, -5.658667165933624], [4.96541522877857, 4.739855652672323, 4.516390225023832, 4.295323280972408, 4.0769645673626, 3.8616281226889577, 3.6496309915270477, 3.4412917571847617, 3.2369288746137403, 3.0368587836776406, 2.8413937806359684, 2.650839623113839, 2.465492840823569, 2.28563772080487, 2.111542931863017, 1.9434577480973076, 1.7816078257921517, 1.6261904813320562, 1.4773694100097625, 1.3352687763982818, 1.199966596081993, 1.0714873156660718, 0.94979348272012, 0.8347763791963536, 0.7262454703377157, 0.6239164954865607, 0.5273979967134803, 0.4361760448368273, 0.3495968790244353, 0.2668471243450528, 0.1869311896589641, 0.10864537403905543, 0.030548120997903633, -0.04907424685525427, -0.13224710813686477, -0.22135338721097828, -0.31918679701126207, -0.4290138365607611, -0.5546461668821705, -0.7005253102824376, -0.8718220038722188, -1.0745530009597248, -1.3157186677342323, -1.6034653831821795, -1.9472775344708344, -2.3582048254762316, -2.849131698834538, -3.435096923873152, -4.133672827363666, -4.965415228778568], [-2.529494905841447, -2.389327176769316, -2.252269160737056, -2.1184942667658593, -1.9881707349071336, -1.8614606998128727, -1.7385192384548578, -1.6194934105931746, -1.5045213022018598, -1.3937310838942147, -1.2872400984921946, -1.185153994301945, -1.087565923451197, -0.9945558278880231, -0.9061898394262511, -0.8225198246646724, -0.7435831108463417, -0.6694024349368503, -0.5999861656052604, -0.53532885666171, -0.4754122011824372, -0.42020646846267934, -0.369672521614982, -0.3237645327454689, -0.28243353603708876, -0.2456319878096678, -0.2133195380543698, -0.18547026175504394, -0.16208165266910704, -0.14318574989329366, -0.12886285199174266, -0.1192583792051212, -0.11460357705518144, -0.11524092193559515, -0.12165530063310956, -0.13451230359210023, -0.1547053122967031, -0.18341349550120792, -0.22217338480924873, -0.2729674135403705, -0.3383337216623158, -0.421502716829894, -0.5265674206724156, -0.6586966310641362, -0.8244025422339454, -1.0318778808252116, -1.2914220976805195, -1.6159820482139855, -2.021840357571976, -2.529494905841446], [0.7052741145099006, 0.6600832513436163, 0.6163859170046642, 0.5742193942215114, 0.5336168907140202, 0.4946072796978801, 0.4572148540360218, 0.4214590964282411, 0.3873544679421098, 0.35491021703202397, 0.3241302109546772, 0.29501279115111156, 0.26755065370680864, 0.2417307553963166, 0.21753424503575844, 0.19493641886557186, 0.17390669741704962, 0.15440861971673392, 0.13639984867233182, 0.11983217896034287, 0.10465153556774394, 0.09079794715873701, 0.07820547342391745, 0.06680205923906107, 0.05650928044374194, 0.04724193586182875, 0.038907427190948536, 0.0314048517492193, 0.024623711678625676, 0.018442115597813263, 0.01272431291861439, 0.007317354477642266, 0.002046612279346189, -0.003290188729272603, -0.00893087923517851, -0.01515928631738301, -0.022318983730945628, -0.030831377031212005, -0.04121948192963222, -0.054139203936587936, -0.07042053760141051, -0.0911219363839685, -0.11760224694198512, -0.15161617907757574, -0.19544147348595825, -0.252048991734986, -0.3253312614354188, -0.42041111295438727, -0.5440607509171959, -0.7052741145099002], [-0.08375647961867896, -0.07775200397928092, -0.07200256075485537, -0.06650967047009518, -0.061274113719699354, -0.05629591979280986, -0.05157435982055304, -0.0471079447367605, -0.042894428322304556, -0.03893081558269863, -0.03521337668787863, -0.03173766668398025, -0.028498551171554615, -0.025490238135743946, -0.022706316115000885, -0.020139798910552426, -0.017783177074877116, -0.015628476481634155, -0.013667324381664282, -0.011891023502805645, -0.010290634972233868, -0.008857071151065356, -0.007581199901406979, -0.006453962394847481, -0.005466507370546309, -0.004610345830277461, -0.0038775316109591618, -0.0032608752295771593, -0.00275420102420064, -0.0023526611550118825, -0.0020531248069307214, -0.0018546674012947953, -0.0017591934048660257, -0.0017722382963570745, -0.0019040116458160586, -0.002170765823686473, -0.0025966060658338666, -0.0032159010348203477, -0.004076513768499315, -0.00524415845475847, -0.006808309742867328, -0.008890264430920574, -0.01165420437843994, -0.015322470474003327, -0.020196785171612677, -0.02668793932497837, -0.03535761754376926, -0.046977778133112276, -0.0626156504262524, -0.08375647961867891]];

/// State-Space `C` vector
#[rustfmt::skip]
static CVALS: [[f64; 50]; 6] = [[0.003262158240609213, 0.003742549837472818, 0.0042905182427717525, 0.004915027296852928, 0.005626139761432388, 0.006435137466173191, 0.0073546522602414115, 0.008398808353984911, 0.009583376592062898, 0.01092594113371596, 0.012446078923185565, 0.014165552207171372, 0.016108514188788475, 0.018301727689040138, 0.020774796405323134, 0.023560407996960665, 0.026694587771529735, 0.03021696116940098, 0.03417102251801441, 0.03860440661484888, 0.04356915855184151, 0.0491219957545678, 0.055324554400921024, 0.06224361010947465, 0.06995125992316215, 0.07852504900015274, 0.08804802085585679, 0.09860866421312504, 0.11030072216904363, 0.12322282003074392, 0.13747785622855635, 0.15317208542290764, 0.17041380328413702, 0.1893115171272956, 0.20997145388736063, 0.2324942145119687, 0.2569703286415261, 0.2834743912978962, 0.31205736862529776, 0.3427365349415825, 0.37548233812311854, 0.4102012704599929, 0.4467135279427812, 0.48472384512408645, 0.5237833568341276, 0.5632396077443564, 0.6021708283731161, 0.6392992095165594, 0.6728759728427499, 0.7005283126020669], [0.0031810755565904207, 0.00375091072270404, 0.00441949989729064, 0.005203287611176463, 0.006121325471343439, 0.0071956605059464475, 0.008451776731262064, 0.009919096389226823, 0.011631547926769611, 0.013628208437069685, 0.01595402894966822, 0.01866065162869364, 0.02180732859895567, 0.025461952744298647, 0.029702211378621838, 0.03461687413308771, 0.04030722667379977, 0.04688866188316859, 0.05449243979942664, 0.06326762677149003, 0.07338322276357699, 0.08503048328735588, 0.09842543871916012, 0.1138116083378974, 0.1314628987131303, 0.1516866653068043, 0.17482690129211234, 0.20126749725770507, 0.23143548780638928, 0.2658041635953824, 0.3048958767670706, 0.3492842994924923, 0.3995958034217702, 0.4565095039730976, 0.5207553463952785, 0.5931093851209565, 0.6743851031432557, 0.7654192051852607, 0.8670497574863028, 0.9800837828638407, 1.1052503752959981, 1.2431339656319367, 1.3940803969797362, 1.5580657390395667, 1.7345139771853377, 1.9220444119502247, 2.118122157167338, 2.3185745955270822, 2.5169216624291555, 2.7034463369097708], [0.008501663901191581, 0.009735719622130129, 0.011143601290226533, 0.012749159988894001, 0.014579469782435489, 0.016665265424797703, 0.01904144135489198, 0.021747620945955885, 0.024828806318767993, 0.028336120562756136, 0.03232765595752765, 0.03686944377322836, 0.042036563474512983, 0.04791441168165456, 0.0546001540722975, 0.062204386551762574, 0.07085303548240694, 0.08068953053218683, 0.09187728774554577, 0.10460254468878712, 0.11907759386102972, 0.13554446480397336, 0.1542791092013293, 0.1755961463005915, 0.19985422758088386, 0.2274620788080826, 0.2588852731329979, 0.2946537787971545, 0.3353703066011498, 0.38171945170655197, 0.4344775761100964, 0.49452330448276566, 0.5628483959851523, 0.6405685924983142, 0.7289338071706745, 0.8293366745157056, 0.9433179891001847, 1.0725668490395, 1.2189122994014863, 1.384301803934919, 1.5707597650755964, 1.7803162760545612, 2.0148919065163455, 2.2761179780874308, 2.565062566414375, 2.8818190121994784, 3.224893997913703, 3.590303172475558, 3.9702392033080534, 4.351112828192072], [0.004246676532999148, 0.004962598673858004, 0.005794312642440942, 0.006759670393827508, 0.007879131568012754, 0.009176123423177385, 0.010677448129759808, 0.012413743593379184, 0.014420004836902492, 0.016736173973911264, 0.019407807972731443, 0.022486834771596537, 0.02603240989581521, 0.030111887586709223, 0.0348019226249537, 0.04018972156897096, 0.046374465088986336, 0.05346892652077583, 0.061601315754522094, 0.07091738217769372, 0.08158281566472408, 0.09378599059381065, 0.10774110458657861, 0.12369177107286816, 0.14191513275933912, 0.1627265713709977, 0.18648509717276615, 0.21359950897367352, 0.24453542028620998, 0.27982324802975933, 0.3200672534801757, 0.3659557062441543, 0.4182722035187233, 0.4779081076380289, 0.5458759480821231, 0.6233234443463573, 0.7115475050734844, 0.8120070888578442, 0.9263330857472237, 1.0563322631214451, 1.2039806135033129, 1.3713988364428649, 1.5607987080154255, 1.7743830078410259, 2.014172347960519, 2.2817179028295005, 2.577636876502537, 2.900873122645682, 3.247531557777438, 3.6090504337100926], [0.0022833983078002335, 0.0026209006271272393, 0.0030073908093579535, 0.0034498727960809903, 0.003956340499719796, 0.004535916559820716, 0.005199010420209739, 0.005957498409031941, 0.006824928880645301, 0.007816755911309318, 0.008950605538952243, 0.010246579112160658, 0.011727598978176396, 0.013419802509887639, 0.015352991366312374, 0.017561143922093098, 0.020083000015231948, 0.022962728579351697, 0.026250690382753676, 0.030004310032209672, 0.03428907366060624, 0.03917967135442684, 0.04476130644227859, 0.05113119731078982, 0.05840030148305563, 0.06669529631229697, 0.07616085579689753, 0.0869622686320712, 0.09928844848149541, 0.11335539318959854, 0.12941015455748714, 0.14773538316252266, 0.16865451149627586, 0.19253763013082434, 0.21980809037595367, 0.25094982443249386, 0.28651529678117943, 0.3271338668300398, 0.37352011823717796, 0.42648133994661336, 0.48692274011877984, 0.55584799610867, 0.6343511646379838, 0.7235934285899653, 0.8247540402480851, 0.9389381484674466, 1.067013333307555, 1.2093288798737205, 1.3652424825156568, 1.5323302952945446], [0.00031201541775068145, 0.0003629264470004798, 0.00042180897621477067, 0.0004898563160335851, 0.0005684323559443108, 0.0006590949661210765, 0.0007636225365809285, 0.0008840440806307585, 0.0010226733917390034, 0.0011821478151393542, 0.0013654722794236899, 0.001576069331200459, 0.0018178360300668641, 0.0020952086946188025, 0.0024132366465078815, 0.0027776662828145598, 0.003195037022185473, 0.003672790923140805, 0.004219398070621475, 0.004844500177367252, 0.005559075259628684, 0.006375626733058869, 0.007308400847013187, 0.008373637048002567, 0.009589856650942167, 0.01097819611571124, 0.012562792290776495, 0.014371228205522071, 0.01643504936964903, 0.018790362055031106, 0.021478526644140933, 0.024546960725063217, 0.028050067996392133, 0.0320503098562459, 0.03661943616234325, 0.041839888997826875, 0.047806386564595627, 0.05462768055076291, 0.062428454480621905, 0.07135128432586518, 0.08155850214166455, 0.09323366542831157, 0.1065821001634345, 0.12182958770528064, 0.1392175918954997, 0.1589922779121058, 0.18138262009188647, 0.2065595368040287, 0.23456216758618176, 0.2651672125265583]];

#[cfg(feature = "std")]
#[cfg(test)]
#[rustfmt::skip]
mod test {
    use super::*;
    static CUTOFF_TEST_INPUT: [f32; 101] = [0.0, 0.5877852522924732, -0.9510565162951536, 0.9510565162951535, -0.5877852522924728, -4.898587196589413e-16, 0.5877852522924736, -0.9510565162951538, 0.9510565162951533, -0.5877852522924725, -9.797174393178826e-16, 0.587785252292474, -0.951056516295154, 0.9510565162951532, -0.587785252292472, -1.4695761589768238e-15, 0.5877852522924744, -0.9510565162951541, 0.951056516295153, -0.5877852522924716, -1.959434878635765e-15, 0.5877852522924748, -0.9510565162951542, 0.9510565162951529, -0.5877852522924712, -2.4492935982947065e-15, 0.5877852522924751, -0.9510565162951544, 0.9510565162951528, -0.5877852522924708, -2.9391523179536475e-15, 0.5877852522924756, -0.9510565162951545, 0.9510565162951525, -0.5877852522924705, -3.429011037612589e-15, 0.587785252292476, -0.9510565162951546, 0.9510565162951524, -0.58778525229247, -3.91886975727153e-15, 0.5877852522924764, -0.9510565162951549, 0.9510565162951523, -0.5877852522924697, -4.408728476930472e-15, 0.5877852522924768, -0.951056516295155, 0.9510565162951521, -0.5877852522924693, -4.898587196589413e-15, 0.5877852522924887, -0.9510565162951552, 0.9510565162951563, -0.5877852522924688, -1.9599300631450357e-14, 0.5877852522924776, -0.9510565162951509, 0.9510565162951519, -0.5877852522924569, -5.878304635907295e-15, 0.5877852522924665, -0.9510565162951554, 0.9510565162951473, -0.587785252292468, 7.842691359635767e-15, 0.5877852522924784, -0.95105651629516, 0.9510565162951515, -0.5877852522924791, -6.858022075225178e-15, 0.5877852522924902, -0.9510565162951558, 0.9510565162951558, -0.5877852522924673, -2.1558735510086122e-14, 0.5877852522924791, -0.9510565162951515, 0.9510565162951512, -0.5877852522924554, -7.83773951454306e-15, 0.587785252292468, -0.9510565162951561, 0.9510565162951466, -0.5877852522924665, 5.883256481000002e-15, 0.5877852522924799, -0.9510565162951606, 0.9510565162951509, -0.5877852522924776, -8.817456953860943e-15, 0.5877852522924918, -0.9510565162951563, 0.9510565162951552, -0.5877852522924657, -2.3518170388721888e-14, 0.5877852522924807, -0.9510565162951521, 0.9510565162951506, -0.5877852522924538, -9.797174393178826e-15];
    static CUTOFF_TEST_OUTPUT: [f32; 101] = [0.0, 0.17010911777007573, 0.1365178766125853, -0.2758226226829056, 0.12500969241519927, 0.15993667325805394, -0.3602533858437819, 0.3414318708175353, -0.11084618772932076, -0.20661827917659803, 0.44411813783985604, -0.47774028965057735, 0.28314454889856877, 0.056864574596477924, -0.3924929902177637, 0.574378603757669, -0.5184536662684898, 0.2414452351223319, 0.14647971190026834, -0.4875905989378392, 0.641409621716719, -0.5419553416347676, 0.22459926628426885, 0.1877683482667627, -0.5333498583158272, 0.6753476535674935, -0.5559404854843619, 0.21923792169312095, 0.20561875187292772, -0.5544955516701416, 0.6919214627279894, -0.5636612562519092, 0.21788545432782802, 0.21320079162969147, -0.5641499158491232, 0.6999016130363233, -0.5677646708790806, 0.2177760656880967, 0.21637396542278695, -0.5685257545253685, 0.7037118564388061, -0.5698955587112431, 0.2179647061064463, 0.21767715004985635, -0.5704947287719067, 0.7055180140251238, -0.5709831024228885, 0.21816286157487425, 0.2181991990635194, -0.5713737089154323, 0.7063682547820197, -0.57153031204086, 0.2183056492491836, 0.218401369924149, -0.571762713991341, 0.7067657868108507, -0.5718023251266052, 0.218395110381563, 0.21847591065110677, -0.5719332336684921, 0.7069504064043498, -0.5719361140604169, 0.21844713716518266, 0.21850130233739357, -0.572007180672379, 0.7070355703324883, -0.5720012982704662, 0.21847600745571139, 0.2185087273886095, -0.5720388543879917, 0.7070745882123162, -0.572032785223079, 0.21849151340568457, 0.21851012279357152, -0.5720522251377653, 0.7070923389916196, -0.5720478744114159, 0.21849964136570998, 0.2185098123722172, -0.5720577706759886, 0.7071003555055267, -0.5720550516365446, 0.21850382147791192, 0.21850922371479767, -0.572060020182487, 0.7071039478803812, -0.5720584412676083, 0.21850593814122726, 0.21850874558578834, -0.5720609063900093, 0.7071055443192281, -0.5720600311086134, 0.21850699604634716, 0.21850842986801217, -0.5720612415291583, 0.7071062473251536, -0.5720607717654101, 0.2185075188608988, 0.21850824069575298, -0.572061360605676, 0.7071065537690802];
    const STEP_TEST_MIN_OUTPUT: f32 = 0.9999998285690135;
    const STEP_TEST_MAX_OUTPUT: f32 = 0.9899352296804014;

    #[test]
    fn test() {
        let order = 6;
        println!("order {order}");
        let mut filter = butter6(0.4).unwrap();
        let out = (0..CUTOFF_TEST_INPUT.len()).map(|i| {filter.update(CUTOFF_TEST_INPUT[i])}).collect::<Vec<f32>>();

        // Check overall match to reference output to catch phase error, etc
        (0..CUTOFF_TEST_INPUT.len()).for_each(|i| { let expected = CUTOFF_TEST_OUTPUT[i]; let rel_err = (out[i] - expected).abs() / expected.abs().max(1e-4); assert!(rel_err < 0.05); });
        // Check approximate attenuation at cutoff frequency; should be -3dB or 1/sqrt(2) magnitude
        let maxmag = out.iter().fold(0.0_f32, |a, b| a.abs().max(b.abs()));
        let attenuation_rel_err = (maxmag - 0.707).abs() / 0.707;
        println!("order {order} attenuation rel err {attenuation_rel_err}");
        assert!(attenuation_rel_err < 0.05);

        // Check convergence of step responses at min and max tabulated cutoff
        let mut filtermin = butter6(MIN_CUTOFF_RATIO).unwrap();
        (0..99).for_each(|_| {filtermin.update(1.0);});
        let step_min_final = filtermin.update(1.0);
        let step_min_rel_err = (step_min_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
        println!("order {order} step min rel err {step_min_rel_err}");
        assert!(step_min_rel_err < 1e-4);


    // Check response of staged filter
    let mut filter_2stage = butter6_2stage(0.1).unwrap();
    let mut maxmag_2stage = 0.0;
    for i in 0..99999 {
        let u = libm::sinf((i as f32) * 2.0 * core::f32::consts::PI / 10.0);
        let v = filter_2stage.update(u);
        maxmag_2stage = v.abs().max(maxmag_2stage);
    }
    let attenuation_2stage_rel_err = (maxmag_2stage - 0.707).abs() / 0.707;
    println!("order {order} attenuation 2stage rel err {attenuation_rel_err}");
    assert!(attenuation_2stage_rel_err < 0.05);

    let mut filtermin_2stage = butter6_2stage(MIN_CUTOFF_RATIO).unwrap();
    (0..99999).for_each(|_| {filtermin_2stage.update(1.0);});
    let step_min_2stage_final = filtermin_2stage.update(1.0);
    let step_min_2stage_rel_err = (step_min_2stage_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
    println!("order {order} step min 2stage rel err {step_min_2stage_rel_err}");
    assert!(step_min_2stage_rel_err < 2e-4);  // 1e-4 per stage
    


                let mut filtermax = butter6(MAX_CUTOFF_RATIO).unwrap();
        (0..1).for_each(|_| {filtermax.update(1.0);});
        let step_max_final = filtermax.update(1.0);
        let step_max_rel_err = (step_max_final - STEP_TEST_MAX_OUTPUT).abs() / STEP_TEST_MAX_OUTPUT;
        println!("order {order} step max rel err {step_max_rel_err}");
        assert!(step_max_rel_err < 1e-6);
    }
}
