//! Butterworth filter of order 5.
//! Region of validity: cutoff ratio from 5.62e-02 to 4.00e-01 .
//! This file is autogenerated.
#![allow(clippy::style)]

use crate::{SisoIirFilter, StagedSisoIirFilter};

/// Minimum tabulated cutoff ratio
#[allow(dead_code)]
pub const MIN_CUTOFF_RATIO: f64 = 0.056234132519034905;

/// Maximum tabulated cutoff ratio
#[allow(dead_code)]
pub const MAX_CUTOFF_RATIO: f64 = 0.4;

/// Initialise a Butterworth filter of order 5 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 5.62e-02 to 4.00e-01
pub fn butter5(cutoff_ratio: f64) -> Result<SisoIirFilter<5>, &'static str> {
    let avals = &[
        &AVALS[0][..],
        &AVALS[1][..],
        &AVALS[2][..],
        &AVALS[3][..],
        &AVALS[4][..],
    ];
    let cvals = &[
        &CVALS[0][..],
        &CVALS[1][..],
        &CVALS[2][..],
        &CVALS[3][..],
        &CVALS[4][..],
    ];
    SisoIirFilter::new_interpolated(cutoff_ratio, &LOG10_CUTOFF_RATIOS, avals, cvals, &DVALS)
}

/// Initialise a two-stage Butterworth filter of combined order 2*5 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 5.17e-02 to 3.91e-01
pub fn butter5_2stage(cutoff_ratio: f64) -> Result<StagedSisoIirFilter<5, 2>, &'static str> {
    // Look up the per-stage cutoff ratio corresponding to the desired combined cutoff
    let log10_root_cutoff_ratio = libm::log10(cutoff_ratio);

    if log10_root_cutoff_ratio < LOG10_ROOT2_CUTOFF_RATIOS[0]
        || log10_root_cutoff_ratio > *LOG10_ROOT2_CUTOFF_RATIOS.last().ok_or("Table size error")?
    {
        return Err("Selected cutoff ratio is outside the grid");
    }

    let log10_cutoff_ratio = interpn::MulticubicRectilinear::<'_, _, 5>::new(
        &[&LOG10_ROOT2_CUTOFF_RATIOS],
        &LOG10_CUTOFF_RATIOS,
        true,
    )?
    .interp_one(&[log10_root_cutoff_ratio])?;
    let cutoff_ratio = libm::pow(10.0, log10_cutoff_ratio);
    let filt = butter5(cutoff_ratio)?;
    Ok(StagedSisoIirFilter::new([filt, filt]))
}

/// [dimensionless] Log base-10 of cutoff ratios, to improve float precision during interpolation
#[rustfmt::skip]
static LOG10_CUTOFF_RATIOS: [f64; 50] = [-1.25, -1.2326110205851437, -1.2152220411702872, -1.197833061755431, -1.1804440823405744, -1.1630551029257181, -1.1456661235108618, -1.1282771440960053, -1.110888164681149, -1.0934991852662925, -1.0761102058514362, -1.05872122643658, -1.0413322470217234, -1.0239432676068672, -1.0065542881920106, -0.9891653087771544, -0.9717763293622981, -0.9543873499474416, -0.9369983705325853, -0.9196093911177289, -0.9022204117028725, -0.8848314322880162, -0.8674424528731598, -0.8500534734583034, -0.832664494043447, -0.8152755146285906, -0.7978865352137343, -0.7804975557988779, -0.7631085763840215, -0.7457195969691651, -0.7283306175543088, -0.7109416381394524, -0.693552658724596, -0.6761636793097396, -0.6587746998948832, -0.641385720480027, -0.6239967410651706, -0.6066077616503142, -0.5892187822354578, -0.5718298028206015, -0.5544408234057451, -0.5370518439908887, -0.5196628645760323, -0.5022738851611759, -0.4848849057463196, -0.4674959263314632, -0.45010694691660685, -0.4327179675017504, -0.415328988086894, -0.3979400086720376];

/// [dimensionless] Log base-10 of root cutoff ratios, used to generate multi-stage filters
#[rustfmt::skip]
static LOG10_ROOT2_CUTOFF_RATIOS: [f64; 50] = [-1.2864036031236, -1.2688041584277048, -1.2524980705810318, -1.2352178530552138, -1.2177300707017589, -1.2002579688558979, -1.1827790199203996, -1.1652926678205213, -1.1477983128010967, -1.1302953082877867, -1.1127829575858879, -1.0952605104254887, -1.077727159367066, -1.0601820360900385, -1.0426242075969756, -1.0250526723810618, -1.0074663566233473, -0.9898641105116753, -0.9722447048071405, -0.9546068278303111, -0.9369490861990856, -0.919270127780632, -0.9015684606147337, -0.8838424315193946, -0.866090286764473, -0.8483101688470321, -0.8305001135129249, -0.812658047035723, -0.794781783746278, -0.7768690237898591, -0.7589173510823749, -0.7409242314660875, -0.7228870111748019, -0.704802916000792, -0.6866690521878512, -0.6684824113913624, -0.6502398846730926, -0.6319382955829245, -0.61357447197829, -0.5951453938710791, -0.5766484858341033, -0.5580821745831563, -0.539446909723767, -0.5207469330257435, -0.5019931096870558, -0.4832019114708804, -0.4643844101597788, -0.445552627298128, -0.426722265056767, -0.4078488687264522];

/// State-Space `D` 1x1 matrix
#[rustfmt::skip]
static DVALS: [f64; 50] = [0.00010200173380017537, 0.00012221218511920706, 0.00014633303727789337, 0.000175099434178149, 0.00020938001486631844, 0.0002502001748600006, 0.0002987691926843548, 0.0003565118327131742, 0.000425105128477313, 0.0005065211580387684, 0.0006030767473456869, 0.0007174911817445466, 0.00085295317378679, 0.0010131985317622656, 0.0012026002037678926, 0.0014262726437388909, 0.0016901927676958397, 0.0020013401517564315, 0.00236785958242897, 0.0027992496223132202, 0.0033065815233870744, 0.003902753634585728, 0.004602787447455961, 0.00542417265078781, 0.006387270083345573, 0.007515783361916798, 0.00883731232191154, 0.01038400437241896, 0.012193323610447145, 0.014308962287908277, 0.016781925280688916, 0.019671825971576642, 0.023048441962101377, 0.02699359199114037, 0.031603412333925204, 0.036991133112289534, 0.04329048419236946, 0.050659899212077746, 0.05928773830881541, 0.06939882030484319, 0.08126265057185927, 0.09520386178184337, 0.11161556616142837, 0.13097657163571025, 0.15387377305935962, 0.18103154295175777, 0.21335068942346525, 0.25196064006775826, 0.2982901360120833, 0.3541641810934298];

/// State-Space `A` matrix, first row
#[rustfmt::skip]
static AVALS: [[f64; 50]; 5] = [[3.8582729539197853, 3.8117703644801333, 3.7633848252870923, 3.7130413462156784, 3.66066207758093, 3.6061662109158226, 3.54946987635474, 3.490486036290761, 3.429124374893979, 3.3652911829800445, 3.2988892376003403, 3.2298176755847106, 3.1579718601014037, 3.083243239103356, 3.0055191943017148, 2.9246828790429764, 2.840613043161656, 2.7531838425327675, 2.662264630654453, 2.5677197291485507, 2.4694081735744335, 2.3671834304089825, 2.2608930804552716, 2.1503784633093206, 2.0354742768465517, 1.9160081250013632, 1.7918000064248278, 1.6626617359467781, 1.5283962901813901, 1.3887970681580188, 1.2436470576118686, 1.0927178976414398, 0.9357688289805401, 0.7725455243431978, 0.6027787934515538, 0.4261831608140211, 0.24245531957061664, 0.051272472411037696, -0.14770941845047192, -0.3548574348847591, -0.5705635015009666, -0.7952460920594207, -1.0293517179728469, -1.2733560228933833, -1.527764242930878, -1.7931107121806906, -2.0699569990868234, -2.358888157189801, -2.660506480961228, -2.9754221097456828], [-6.058101770819957, -5.922895343032371, -5.78422567303118, -5.642110938380156, -5.496581832431467, -5.347682871827259, -5.195473803978975, -5.040031120988369, -4.881449686981443, -4.71984448642844, -4.555352501745373, -4.3881347293463335, -4.218378344379912, -4.046299025684956, -3.8721434540977935, -3.6961919992054133, -3.5187616120507204, -3.3402089442590364, -3.160933717690779, -2.981382373179982, -2.802052032365943, -2.623494813273293, -2.446322548391413, -2.2712119638411696, -2.0989103901445856, -1.9302420895465802, -1.766115302269942, -1.60753013510057, -1.4555874409940455, -1.3114988687889182, -1.1765982985787453, -1.0523549219771904, -0.940388278745302, -0.8424856235845531, -0.760622071096302, -0.6969840549295566, -0.6539967410845642, -0.634356157315318, -0.6410669424317847, -0.6774867821781532, -0.7473787818817031, -0.8549732270266752, -1.005040393156263, -1.2029762695902848, -1.4549032274667342, -1.7677877405641989, -2.149577174204096, -2.609357263696828, -3.1575310162989934, -3.80601811932041], [4.823280869710184, 4.672238898899494, 4.519194869906136, 4.364315653554921, 4.207785030414479, 4.049804173283327, 3.8905920430950274, 3.730385680407341, 3.569440372641841, 3.4080296750692365, 3.2464452611686117, 3.084996575394307, 2.924010258521217, 2.7638293125528355, 2.604811968593357, 2.447330217009485, 2.2917679545124527, 2.138518697310804, 1.9879828030032978, 1.8405641361189693, 1.6966661028048078, 1.5566869686424412, 1.421014359340607, 1.290018826324077, 1.1640463370245806, 1.043409521692824, 0.9283774731425629, 0.8191638508813283, 0.7159129838319145, 0.6186835927487124, 0.5274296598664693, 0.4419778532689195, 0.3620007590600619, 0.2869849753247593, 0.21619286444767394, 0.14861642657576601, 0.0829213228792632, 0.01737851080734606, -0.050219788037188844, -0.12266404084242546, -0.2034568144080221, -0.2969748776200174, -0.40867347811503396, -0.545345262183212, -0.7154502777040652, -0.9295387779337367, -1.2007955439553948, -1.5457436794991986, -1.985157901758697, -2.5452528683304654], [-1.9430914984330818, -1.8666737353720741, -1.7900610645619726, -1.7133780683500577, -1.6367556047966316, -1.5603304822065096, -1.4842450534668092, -1.4086467256275488, -1.3336873807993155, -1.259522705270626, -1.1863114247913191, -1.1142144452541294, -1.0433938995646126, -0.9740121033537744, -0.9062304243973665, -0.8402080732077797, -0.776100825315878, -0.7140596893328399, -0.6542295390678521, -0.5967477328965352, -0.5417427493860627, -0.48933287509871987, -0.4396249888025985, -0.39271349640416586, -0.3486794833095266, -0.3075901663372388, -0.26949874672511864, -0.23444479053641804, -0.2024552947135193, -0.17354663867368866, -0.14772767617124116, -0.12500429497936852, -0.10538586946679673, -0.08889416271048646, -0.07557541353185969, -0.06551658833684104, -0.05886711429498997, -0.05586787706107225, -0.05688991756894234, -0.06248617792974082, -0.07346094281184369, -0.09096347251632635, -0.11661498504756472, -0.15268200515510758, -0.20231474911947706, -0.26987756141833896, -0.3614108677923987, -0.48528285466005827, -0.6531175906599364, -0.8811300754378361], [0.3163753901414638, 0.3016490251010042, 0.28702438520703166, 0.2725288250659138, 0.2581901687569669, 0.24403656423909856, 0.2300963238301162, 0.2163977512709936, 0.20296895613366467, 0.18983765659254354, 0.17703097185267855, 0.16457520580561918, 0.1524956237607264, 0.140816224366146, 0.12955950907951558, 0.1187462517610873, 0.10839527112622321, 0.09852320889209859, 0.08914431646315296, 0.08027025289497441, 0.07190989662437777, 0.0640691730138456, 0.05675089907954217, 0.049954645786728036, 0.043676616915921354, 0.03790954160829425, 0.0326425751265005, 0.027861198891474752, 0.023547106159951474, 0.01967805334281054, 0.016227648289603422, 0.013165034955746828, 0.010454417384252545, 0.00805434291059054, 0.005916632043327131, 0.003984796283345472, 0.002191718773851732, 0.00045627637151852003, -0.0013215593937057238, -0.003267813919903971, -0.005544777696961553, -0.008365907796546704, -0.012017542873999542, -0.01689073252074123, -0.023528240678352963, -0.0326945823592838, -0.04548147651217754, -0.06346852712237744, -0.0889713627078121, -0.12543062215535555]];

/// State-Space `C` vector
#[rustfmt::skip]
static CVALS: [[f64; 50]; 5] = [[0.0009035591997750192, 0.0010769057110117887, 0.0012823727183192612, 0.001525648609693183, 0.0018133695545560556, 0.0021532642908453675, 0.002554318212837716, 0.003026958737423633, 0.0035832640003405558, 0.0042371969773345505, 0.00500486712799414, 0.005904821609597432, 0.006958367989736815, 0.00818993018173678, 0.009627439014335017, 0.011302758400684952, 0.013252147459853498, 0.015516758128010042, 0.01814316672880172, 0.021183936593591385, 0.024698207057377616, 0.028752301909688405, 0.033420347528039365, 0.038784887303464584, 0.04493747437064931, 0.05197921879676663, 0.060021257884737014, 0.06918510859801985, 0.07960284862342429, 0.09141705631337206, 0.10478041839983558, 0.11985488617631271, 0.13681022335520843, 0.15582173863440374, 0.17706692842522143, 0.2007206635933354, 0.22694842914107496, 0.2558969543450859, 0.2876813341972381, 0.322367414166811, 0.35994775040776683, 0.4003088098782407, 0.4431861560263637, 0.48810305182829294, 0.5342860168918477, 0.5805481158493931, 0.6251266942852252, 0.6654562304049944, 0.6978478399934628, 0.7170329705617839], [0.0004020804538402055, 0.0004982718690877091, 0.0006169070617435141, 0.0007630639089007793, 0.000942925762874748, 0.0011640105589729955, 0.0014354444128160358, 0.0017682875952567448, 0.0021759219884333442, 0.0026745104853590548, 0.0032835403036912316, 0.004026463844832479, 0.00493145254079559, 0.006032281085727574, 0.007369361530762409, 0.008990948902915668, 0.010954542249024514, 0.013328507242162745, 0.01619394863143276, 0.019646862741036844, 0.023800601756080314, 0.028788682428038125, 0.034767971756395136, 0.04192228068946875, 0.05046639329086203, 0.06065055223808227, 0.07276541069644872, 0.08714744377251005, 0.1041847873931284, 0.12432343502494778, 0.14807366807475497, 0.176016516830299, 0.20880993495651226, 0.2471942067299608, 0.29199587039611147, 0.3441291011698528, 0.40459300634191214, 0.4744625731266225, 0.554869973966826, 0.6469714195931437, 0.7518925249217181, 0.8706418648854095, 1.0039775091170429, 1.152204008807051, 1.31486628154705, 1.490290087232039, 1.674893122149264, 1.8621510743510756, 2.041041003806635, 2.193686520478429], [0.0015120003493174104, 0.0017931263764255356, 0.0021246378841429728, 0.002515183543293795, 0.0029748262408856403, 0.0035152634609042547, 0.004150080970623224, 0.004895044962780744, 0.005768438692977148, 0.0067914507180342415, 0.007988623121998254, 0.009388369656003006, 0.011023575568058705, 0.012932293119142702, 0.015158549441886344, 0.0177532865761051, 0.020775457298912434, 0.024293304851774285, 0.02838585995408506, 0.03314469468600648, 0.03867598002076227, 0.0451029020706388, 0.05256850153038723, 0.061239011344626545, 0.07130777917756083, 0.08299987354197247, 0.09657748490190328, 0.11234624473346887, 0.1306625947932548, 0.1519423430758717, 0.17667053794958743, 0.20541277112856365, 0.23882797310644624, 0.27768267524290774, 0.32286655557804433, 0.3754088211410323, 0.4364945461410097, 0.5074793857267336, 0.589899965437081, 0.6854754633201424, 0.7960930657028901, 0.9237654626168177, 1.0705413399793142, 1.238338263558568, 1.428648696926905, 1.642039590314742, 1.8773163370751438, 2.130139833810273, 2.3907483395997695, 2.640204413146335], [0.00031180996722832176, 0.0003829306494915817, 0.0004697201138992142, 0.0005754856405894, 0.0007041961614667434, 0.0008606059148125452, 0.0010503992670517484, 0.0012803599377669817, 0.0015585682970233011, 0.001894630890944042, 0.002299946901326258, 0.0027880168696805033, 0.0033747997307905387, 0.004079125025774608, 0.0049231681257985264, 0.005932997428829636, 0.007139203836527529, 0.00857762443176962, 0.010290174228954948, 0.012325802245639205, 0.014741591051386501, 0.017604022516114825, 0.02099043685723124, 0.024990717447148314, 0.02970924038430853, 0.03526713575513735, 0.041804917014384095, 0.04948554613207379, 0.058498015127145336, 0.06906153913156633, 0.08143047158004901, 0.09590006712134944, 0.11281322971447583, 0.13256838719710093, 0.15562862071347178, 0.1825321327212165, 0.21390403508100964, 0.25046923503928203, 0.2930658169988395, 0.3426576344905334, 0.4003436219328982, 0.467359235044576, 0.5450617832281515, 0.6348850925928695, 0.7382379315042263, 0.8563013634071691, 0.989646189308685, 1.137531021664734, 1.29663214511058, 1.4587561938629157], [0.00013427257212631158, 0.00015907737161587933, 0.00018833418733805836, 0.00022281907724442626, 0.00026343987623898943, 0.0003112581659048568, 0.0003675148855947165, 0.00043366019161380576, 0.0005113882726514206, 0.0006026779476953895, 0.0007098400100300461, 0.0008355724406438723, 0.0009830248000620978, 0.0011558733235383506, 0.001358408495786986, 0.0015956371741722608, 0.001873401671005812, 0.0021985186055920748, 0.0025789408063853275, 0.003023946097412464, 0.0035443574589139166, 0.004152799832430416, 0.004863999773371118, 0.005695135274243973, 0.006666244431914383, 0.007800703263994308, 0.009125784953295886, 0.010673315183528868, 0.012480441095944986, 0.01459053481109, 0.01705425646176634, 0.019930806248135816, 0.023289399994429905, 0.027211007637425583, 0.031790398096018586, 0.037138535242032124, 0.043385364759303005, 0.05068301412707173, 0.05920938604132183, 0.06917203787382611, 0.08081206723937245, 0.0944073950523013, 0.11027422130967768, 0.12876428139772778, 0.15025339389273273, 0.1751127922610933, 0.20364718505359503, 0.23596906934984616, 0.27175085612878963, 0.3097411475137389]];

#[cfg(feature = "std")]
#[cfg(test)]
#[rustfmt::skip]
mod test {
    use super::*;
    static CUTOFF_TEST_INPUT: [f32; 101] = [0.0, 0.5877852522924732, -0.9510565162951536, 0.9510565162951535, -0.5877852522924728, -4.898587196589413e-16, 0.5877852522924736, -0.9510565162951538, 0.9510565162951533, -0.5877852522924725, -9.797174393178826e-16, 0.587785252292474, -0.951056516295154, 0.9510565162951532, -0.587785252292472, -1.4695761589768238e-15, 0.5877852522924744, -0.9510565162951541, 0.951056516295153, -0.5877852522924716, -1.959434878635765e-15, 0.5877852522924748, -0.9510565162951542, 0.9510565162951529, -0.5877852522924712, -2.4492935982947065e-15, 0.5877852522924751, -0.9510565162951544, 0.9510565162951528, -0.5877852522924708, -2.9391523179536475e-15, 0.5877852522924756, -0.9510565162951545, 0.9510565162951525, -0.5877852522924705, -3.429011037612589e-15, 0.587785252292476, -0.9510565162951546, 0.9510565162951524, -0.58778525229247, -3.91886975727153e-15, 0.5877852522924764, -0.9510565162951549, 0.9510565162951523, -0.5877852522924697, -4.408728476930472e-15, 0.5877852522924768, -0.951056516295155, 0.9510565162951521, -0.5877852522924693, -4.898587196589413e-15, 0.5877852522924887, -0.9510565162951552, 0.9510565162951563, -0.5877852522924688, -1.9599300631450357e-14, 0.5877852522924776, -0.9510565162951509, 0.9510565162951519, -0.5877852522924569, -5.878304635907295e-15, 0.5877852522924665, -0.9510565162951554, 0.9510565162951473, -0.587785252292468, 7.842691359635767e-15, 0.5877852522924784, -0.95105651629516, 0.9510565162951515, -0.5877852522924791, -6.858022075225178e-15, 0.5877852522924902, -0.9510565162951558, 0.9510565162951558, -0.5877852522924673, -2.1558735510086122e-14, 0.5877852522924791, -0.9510565162951515, 0.9510565162951512, -0.5877852522924554, -7.83773951454306e-15, 0.587785252292468, -0.9510565162951561, 0.9510565162951466, -0.5877852522924665, 5.883256481000002e-15, 0.5877852522924799, -0.9510565162951606, 0.9510565162951509, -0.5877852522924776, -8.817456953860943e-15, 0.5877852522924918, -0.9510565162951563, 0.9510565162951552, -0.5877852522924657, -2.3518170388721888e-14, 0.5877852522924807, -0.9510565162951521, 0.9510565162951506, -0.5877852522924538, -9.797174393178826e-15];
    static CUTOFF_TEST_OUTPUT: [f32; 101] = [0.0, 0.2081724825369588, 0.08463125323643644, -0.30971772623414096, 0.25898286035029683, 0.009372973898091079, -0.3071835272951893, 0.45106437907150304, -0.355794988565145, 0.06422673819947305, 0.2844805983647028, -0.525455044690594, 0.543791379585562, -0.32378509991570226, -0.04635785092968514, 0.41349122772143404, -0.6242290513599539, 0.5882990116897291, -0.31521872073151647, -0.08964292716169169, 0.4672464923395224, -0.668061199098541, 0.611165392156632, -0.3161853514828863, -0.10416885760196688, 0.48782482797714405, -0.686194521772878, 0.6217539122794302, -0.3181315022297296, -0.10883463947612676, 0.4955607848503133, -0.6935561523585924, 0.6264769606443558, -0.31950076415008594, -0.11023045591563022, 0.49842023945620306, -0.6965048623821606, 0.6285342703628933, -0.3202756770131871, -0.11059418179821785, 0.49945497034014463, -0.6976698259794389, 0.6294128480518887, -0.32067190806799184, -0.1106600929614165, 0.4998196415871739, -0.6981235286771286, 0.6297815508463074, -0.32086255854777307, -0.11065438425728495, 0.49994386326910023, -0.6982975812762259, 0.6299338519808819, -0.3209505636598987, -0.11063935640787678, 0.49998423500234146, -0.6983632708114029, 0.629995841576193, -0.32098995253522616, -0.11062835262338874, 0.4999964468500758, -0.6983876135858595, 0.6300207170069962, -0.3210071558361416, -0.11062202380324988, 0.49999969516300335, -0.6983964447020872, 0.630030559925036, -0.32101451775450657, -0.11061875990306608, 0.5000003244858076, -0.6983995669211734, 0.6300343993837529, -0.32101761283874763, -0.11061718084159386, 0.5000003058095835, -0.6984006349567567, 0.6300358747977863, -0.32101889346009965, -0.11061644909097712, 0.5000001907297321, -0.6984009841637866, 0.6300364326737501, -0.3210194155192463, -0.110616120594095, 0.5000001024753412, -0.698401090822338, 0.6300366398454267, -0.32101962533455025, -0.11061597677110602, 0.5000000508476371, -0.6984011197350236, 0.6300367151918089, -0.3210197084835984, -0.1106159150962407, 0.5000000239816668, -0.6984011256611038, 0.6300367419130057, -0.32101974096917446, -0.11061588911943747, 0.5000000109097329];
    const STEP_TEST_MIN_OUTPUT: f32 = 1.0000000090010657;
    const STEP_TEST_MAX_OUTPUT: f32 = 1.0711971516552137;

    #[test]
    fn test() {
        let order = 5;
        println!("order {order}");
        let mut filter = butter5(0.4).unwrap();
        let out = (0..CUTOFF_TEST_INPUT.len()).map(|i| {filter.update(CUTOFF_TEST_INPUT[i])}).collect::<Vec<f32>>();

        // Check overall match to reference output to catch phase error, etc
        (0..CUTOFF_TEST_INPUT.len()).for_each(|i| { let expected = CUTOFF_TEST_OUTPUT[i]; let rel_err = (out[i] - expected).abs() / expected.abs().max(1e-4); assert!(rel_err < 0.05); });
        // Check approximate attenuation at cutoff frequency; should be -3dB or 1/sqrt(2) magnitude
        let maxmag = out.iter().fold(0.0_f32, |a, b| a.abs().max(b.abs()));
        let attenuation_rel_err = (maxmag - 0.707).abs() / 0.707;
        println!("order {order} attenuation rel err {attenuation_rel_err}");
        assert!(attenuation_rel_err < 0.05);

        // Check convergence of step responses at min and max tabulated cutoff
        let mut filtermin = butter5(MIN_CUTOFF_RATIO).unwrap();
        (0..169).for_each(|_| {filtermin.update(1.0);});
        let step_min_final = filtermin.update(1.0);
        let step_min_rel_err = (step_min_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
        println!("order {order} step min rel err {step_min_rel_err}");
        assert!(step_min_rel_err < 1e-4);


    // Check response of staged filter
    let mut filter_2stage = butter5_2stage(0.1).unwrap();
    let mut maxmag_2stage = 0.0;
    for i in 0..99999 {
        let u = libm::sinf((i as f32) * 2.0 * core::f32::consts::PI / 10.0);
        let v = filter_2stage.update(u);
        maxmag_2stage = v.abs().max(maxmag_2stage);
    }
    let attenuation_2stage_rel_err = (maxmag_2stage - 0.707).abs() / 0.707;
    println!("order {order} attenuation 2stage rel err {attenuation_rel_err}");
    assert!(attenuation_2stage_rel_err < 0.05);

    let mut filtermin_2stage = butter5_2stage(MIN_CUTOFF_RATIO).unwrap();
    (0..99999).for_each(|_| {filtermin_2stage.update(1.0);});
    let step_min_2stage_final = filtermin_2stage.update(1.0);
    let step_min_2stage_rel_err = (step_min_2stage_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
    println!("order {order} step min 2stage rel err {step_min_2stage_rel_err}");
    assert!(step_min_2stage_rel_err < 2e-4);  // 1e-4 per stage
    


                let mut filtermax = butter5(MAX_CUTOFF_RATIO).unwrap();
        (0..1).for_each(|_| {filtermax.update(1.0);});
        let step_max_final = filtermax.update(1.0);
        let step_max_rel_err = (step_max_final - STEP_TEST_MAX_OUTPUT).abs() / STEP_TEST_MAX_OUTPUT;
        println!("order {order} step max rel err {step_max_rel_err}");
        assert!(step_max_rel_err < 1e-6);
    }
}
