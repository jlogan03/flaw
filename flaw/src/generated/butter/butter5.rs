//! Butterworth filter of order 5.
//! Region of validity: cutoff ratio from 5.62e-02 to 4.00e-01 .
//! This file is autogenerated.
#![allow(clippy::style)]

use crate::{SisoIirFilter, StagedSisoIirFilter};

/// Minimum tabulated cutoff ratio
#[allow(dead_code)]
pub const MIN_CUTOFF_RATIO: f64 = 0.056234132519034905;

/// Maximum tabulated cutoff ratio
#[allow(dead_code)]
pub const MAX_CUTOFF_RATIO: f64 = 0.4;

/// Initialise a Butterworth filter of order 5 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 5.62e-02 to 4.00e-01
pub fn butter5(cutoff_ratio: f64) -> Result<SisoIirFilter<5>, &'static str> {
    let avals = &[
        &AVALS[0][..],
        &AVALS[1][..],
        &AVALS[2][..],
        &AVALS[3][..],
        &AVALS[4][..],
    ];
    let cvals = &[
        &CVALS[0][..],
        &CVALS[1][..],
        &CVALS[2][..],
        &CVALS[3][..],
        &CVALS[4][..],
    ];
    SisoIirFilter::new_interpolated(cutoff_ratio, &LOG10_CUTOFF_RATIOS, avals, cvals, &DVALS)
}

/// Initialise a two-stage Butterworth filter of combined order 2*5 by interpolating the coefficients from stored tables.
/// Cutoff ratio is the dimensionless ratio of the cutoff frequency to the sampling frequency.
/// Region of validity: cutoff ratio from 5.16e-02 to 3.89e-01
pub fn butter5_2stage(cutoff_ratio: f64) -> Result<StagedSisoIirFilter<5, 2>, &'static str> {
    // Look up the per-stage cutoff ratio corresponding to the desired combined cutoff
    let log10_root_cutoff_ratio = libm::log10(cutoff_ratio);

    if log10_root_cutoff_ratio < LOG10_ROOT2_CUTOFF_RATIOS[0]
        || log10_root_cutoff_ratio > *LOG10_ROOT2_CUTOFF_RATIOS.last().ok_or("Table size error")?
    {
        return Err("Selected cutoff ratio is outside the grid");
    }

    let log10_cutoff_ratio = interpn::MulticubicRectilinear::<'_, _, 5>::new(
        &[&LOG10_ROOT2_CUTOFF_RATIOS],
        &LOG10_CUTOFF_RATIOS,
        true,
    )?
    .interp_one(&[log10_root_cutoff_ratio])?;
    let cutoff_ratio = libm::pow(10.0, log10_cutoff_ratio);
    let filt = butter5(cutoff_ratio)?;
    Ok(StagedSisoIirFilter::new([filt, filt]))
}

/// [dimensionless] Log base-10 of cutoff ratios, to improve float precision during interpolation
#[rustfmt::skip]
static LOG10_CUTOFF_RATIOS: [f64; 30] = [-1.25, -1.220618620988691, -1.191237241977382, -1.161855862966073, -1.1324744839547638, -1.1030931049434547, -1.0737117259321458, -1.0443303469208367, -1.0149489679095276, -0.9855675888982186, -0.9561862098869096, -0.9268048308756005, -0.8974234518642914, -0.8680420728529824, -0.8386606938416734, -0.8092793148303643, -0.7798979358190552, -0.7505165568077462, -0.7211351777964372, -0.6917537987851281, -0.6623724197738191, -0.63299104076251, -0.603609661751201, -0.5742282827398919, -0.5448469037285829, -0.5154655247172738, -0.48608414570596487, -0.4567027666946557, -0.4273213876833467, -0.3979400086720376];

/// [dimensionless] Log base-10 of root cutoff ratios, used to generate multi-stage filters
#[rustfmt::skip]
static LOG10_ROOT2_CUTOFF_RATIOS: [f64; 30] = [-1.2872233051874047, -1.257432483159125, -1.228830514243583, -1.1991304257954922, -1.1695917087509085, -1.140030458330466, -1.1104434929671554, -1.0808271970708878, -1.0511774673010634, -1.021489654483807, -0.9917585020530877, -0.9619780828402033, -0.9321417376485693, -0.9022420218129632, -0.8722706707041213, -0.8422186033759588, -0.8120759977995035, -0.7818324955736878, -0.7514776350526154, -0.721001720076896, -0.6904005087638923, -0.659669726873725, -0.628804656361243, -0.5978038292799405, -0.5666705183879601, -0.535414776829483, -0.5040564458542575, -0.47263027117668766, -0.4411964955480517, -0.40990532134325874];

/// State-Space `D` 1x1 matrix
#[rustfmt::skip]
static DVALS: [f64; 30] = [0.00010200173380017537, 0.00013838691417956216, 0.00018740150434686263, 0.0002532859572520906, 0.0003416486022031054, 0.0004598865652853302, 0.0006177296292706211, 0.000827941265272301, 0.001107220459551149, 0.0014773601303722913, 0.0019667338882005847, 0.002612204098270267, 0.0034615728023317453, 0.004576736228139825, 0.006037758126216448, 0.0079481542249894, 0.010441790675170417, 0.013691960405248772, 0.017923439275615696, 0.02342868064239383, 0.030589849678472957, 0.03990923755976796, 0.05205191389125289, 0.06790658615551529, 0.08867408285764802, 0.11599863849119985, 0.15216703092967596, 0.20041802227133343, 0.26543621524097055, 0.3541641810934298];

/// State-Space `A` matrix, first row
#[rustfmt::skip]
static AVALS: [[f64; 30]; 5] = [[3.8582729539197853, 3.7786069961489117, 3.6934173024546184, 3.602327742033202, 3.504937745361512, 3.400820852263833, 3.2895231618501013, 3.1705616619798653, 3.0434224068298175, 2.907558499112599, 2.762387817867322, 2.6072904128526577, 2.441605461801149, 2.2646276566705317, 2.0756028494131646, 1.8737227471365179, 1.6581184023360032, 1.4278521993519089, 1.1819079993596433, 0.9191790836825667, 0.6384535472011966, 0.33839687064232293, 0.017531593158202567, -0.3257856023827639, -0.6933883567771394, -1.0873243605778296, -1.5098739489705229, -1.9635558645702642, -2.451107652964371, -2.9754221097456828], [-6.058101770819957, -5.827630848367302, -5.587310080564477, -5.337291185551248, -5.077843061005676, -4.809372256239684, -4.532446101648567, -4.247818807224399, -3.9564608987704495, -3.6595924399365383, -3.358720600307869, -3.055682288471125, -2.752692793362382, -2.452401693230346, -2.157957734262101, -1.8730849973966945, -1.6021735251886589, -1.3503887552007074, -1.1238057150818075, -0.9295761273660955, -0.7761395473451955, -0.6734936721636318, -0.6335443346555165, -0.6705628021966461, -0.8017871923810138, -1.0482162354718811, -1.4356567098547508, -1.9960983332724171, -2.7694953705995937, -3.80601811932041], [4.823280869710184, 4.566895815142833, 4.305125865505579, 4.038860944680389, 3.7691338143082547, 3.497124408274009, 3.2241612187186632, 2.9517188264427943, 2.6814104984655156, 2.414974573586325, 2.15425311050944, 1.901160962396406, 1.6576430350095934, 1.425616933605699, 1.2068974302668416, 1.003098071463865, 0.81550361631543, 0.6449045751605578, 0.4913814846402386, 0.3540210585038268, 0.23053797758244654, 0.11676322801394161, 0.005940014567363026, -0.11226274183749166, -0.2531581509666988, -0.43908678797572076, -0.7024406625602424, -1.0902072067414472, -1.6708988196193295, -2.5452528683304654], [-1.9430914984330818, -1.8138508863489553, -1.6842999717379488, -1.5550706459251058, -1.426841916958973, -1.3003334616300233, -1.1762971173526593, -1.0555062128434267, -0.938742719098691, -0.8267823159974204, -0.7203776220430116, -0.6202400348893858, -0.5270208922436638, -0.4412930078705234, -0.36353410010308806, -0.2941142671791853, -0.23329056972474918, -0.1812131158378536, -0.13794908028055958, -0.10353429125039763, -0.07806718922346594, -0.061868506865525065, -0.05574443050092035, -0.06141578919667293, -0.08221929087038178, -0.12426466805842926, -0.19837411205653205, -0.32339763365444557, -0.532012274716134, -0.8811300754378361], [0.3163753901414638, 0.29155054217076604, 0.267070036203129, 0.24306799413069483, 0.21968066302438277, 0.19704408724273526, 0.1752914902958027, 0.15455041115645254, 0.13493965786817114, 0.11656615906312137, 0.09952180955169991, 0.08388041696679818, 0.06969485912068804, 0.056994551524163925, 0.04578329464625672, 0.03603751077583629, 0.027704774656521873, 0.020702363558134002, 0.014915254542782587, 0.010192495873497152, 0.006340022073883961, 0.0031064784603174397, 0.00015591291077921522, -0.002983821362913604, -0.007017660449501863, -0.013064379634534575, -0.022999556307582728, -0.04011767444409799, -0.07044476981162862, -0.12543062215535555]];

/// State-Space `C` vector
#[rustfmt::skip]
static CVALS: [[f64; 30]; 5] = [[0.0009035591997750192, 0.0012148443329921634, 0.00162915948039504, 0.0021788488167370943, 0.0029057000925271914, 0.0038634246473249947, 0.00512068406959989, 0.006764745160404964, 0.008905841853654119, 0.01168231165517551, 0.01526655117475505, 0.019871795193185823, 0.025759659072254224, 0.03324828458023055, 0.04272077860192459, 0.05463340849405886, 0.06952267864769264, 0.08800989780431756, 0.11080105263396549, 0.13867855641673618, 0.17247944642793722, 0.21305134889878635, 0.2611721224337117, 0.3174099427011448, 0.3818848376868556, 0.45386504703065655, 0.5310821187554703, 0.6085581283602166, 0.6765683376538119, 0.7170329705617839], [0.0004020804538402055, 0.0005774012917124467, 0.0008269447291184531, 0.0011809986654554125, 0.001681648038031727, 0.002387099964752675, 0.0033774700426457693, 0.004762468174822164, 0.00669153014097872, 0.009367065339548817, 0.013061629256382948, 0.018139975185746525, 0.02508708151663963, 0.034543366606039475, 0.047348354416091844, 0.0645939738140712, 0.08768834617638432, 0.11843013468458645, 0.15909192926429833, 0.21250806420308482, 0.282156504701922, 0.37221375664030076, 0.4875419437587488, 0.6335302308551025, 0.8156430846450852, 1.0383947287528894, 1.303210690323895, 1.6041261424997715, 1.9192377831103604, 2.193686520478429], [0.0015120003493174104, 0.0020158677610327943, 0.0026808021070669607, 0.0035558463331023613, 0.0047042053212059285, 0.006207146185349929, 0.008168956207054004, 0.010723262472616128, 0.014041117159867753, 0.018341388454602175, 0.02390418147820628, 0.031088261440146005, 0.04035378006928131, 0.05229203494888106, 0.06766453602926785, 0.08745432042467824, 0.11293322480811438, 0.14574961196074984, 0.18804163895726816, 0.24258105274430666, 0.31295061886415576, 0.4037523070027334, 0.520828328039302, 0.6714424820045108, 0.8642922617215701, 1.1090529153273407, 1.4147819992706931, 1.7856830504722587, 2.2108450936793456, 2.640204413146335], [0.00031180996722832176, 0.0004409213439541151, 0.0006213671732592434, 0.0008725522291126856, 0.0012207644645216946, 0.001701426937032036, 0.002362014564138747, 0.0032658091769971432, 0.0044967071529149975, 0.006165345421710003, 0.008416878359429579, 0.011440826930301988, 0.01548354282480745, 0.02086399944435331, 0.027993859664028037, 0.03740310556963709, 0.04977298208029501, 0.06597863921928021, 0.08714467441454284, 0.11471773136672699, 0.15056118480919806, 0.19707706286087545, 0.2573579651599136, 0.33536239419718356, 0.4360796940771028, 0.5655786601486605, 0.7306491550034265, 0.9372753972124139, 1.1859657515424626, 1.4587561938629157], [0.00013427257212631158, 0.00017873369403795277, 0.00023745083089730007, 0.00031485166682282916, 0.0004167021936564372, 0.0005505044937771747, 0.000726012376585342, 0.0009558999282335286, 0.0012566284095476203, 0.0016495703263227817, 0.0021624668036609577, 0.002831316867235556, 0.0037028266311262617, 0.004837585256907048, 0.006314186585511846, 0.008234585918520464, 0.010731078132836585, 0.013975416347381808, 0.018190771934693612, 0.02366747737316291, 0.030783790000671267, 0.04003321474661507, 0.0520600294566593, 0.06770396503306193, 0.08805179825348206, 0.11448318824086168, 0.1486672567336512, 0.1923777173011221, 0.24673762215865047, 0.3097411475137389]];

#[cfg(feature = "std")]
#[cfg(test)]
#[rustfmt::skip]
mod test {
    use super::*;
    static CUTOFF_TEST_INPUT: [f32; 101] = [0.0, 0.5877852522924732, -0.9510565162951536, 0.9510565162951535, -0.5877852522924728, -4.898587196589413e-16, 0.5877852522924736, -0.9510565162951538, 0.9510565162951533, -0.5877852522924725, -9.797174393178826e-16, 0.587785252292474, -0.951056516295154, 0.9510565162951532, -0.587785252292472, -1.4695761589768238e-15, 0.5877852522924744, -0.9510565162951541, 0.951056516295153, -0.5877852522924716, -1.959434878635765e-15, 0.5877852522924748, -0.9510565162951542, 0.9510565162951529, -0.5877852522924712, -2.4492935982947065e-15, 0.5877852522924751, -0.9510565162951544, 0.9510565162951528, -0.5877852522924708, -2.9391523179536475e-15, 0.5877852522924756, -0.9510565162951545, 0.9510565162951525, -0.5877852522924705, -3.429011037612589e-15, 0.587785252292476, -0.9510565162951546, 0.9510565162951524, -0.58778525229247, -3.91886975727153e-15, 0.5877852522924764, -0.9510565162951549, 0.9510565162951523, -0.5877852522924697, -4.408728476930472e-15, 0.5877852522924768, -0.951056516295155, 0.9510565162951521, -0.5877852522924693, -4.898587196589413e-15, 0.5877852522924887, -0.9510565162951552, 0.9510565162951563, -0.5877852522924688, -1.9599300631450357e-14, 0.5877852522924776, -0.9510565162951509, 0.9510565162951519, -0.5877852522924569, -5.878304635907295e-15, 0.5877852522924665, -0.9510565162951554, 0.9510565162951473, -0.587785252292468, 7.842691359635767e-15, 0.5877852522924784, -0.95105651629516, 0.9510565162951515, -0.5877852522924791, -6.858022075225178e-15, 0.5877852522924902, -0.9510565162951558, 0.9510565162951558, -0.5877852522924673, -2.1558735510086122e-14, 0.5877852522924791, -0.9510565162951515, 0.9510565162951512, -0.5877852522924554, -7.83773951454306e-15, 0.587785252292468, -0.9510565162951561, 0.9510565162951466, -0.5877852522924665, 5.883256481000002e-15, 0.5877852522924799, -0.9510565162951606, 0.9510565162951509, -0.5877852522924776, -8.817456953860943e-15, 0.5877852522924918, -0.9510565162951563, 0.9510565162951552, -0.5877852522924657, -2.3518170388721888e-14, 0.5877852522924807, -0.9510565162951521, 0.9510565162951506, -0.5877852522924538, -9.797174393178826e-15];
    static CUTOFF_TEST_OUTPUT: [f32; 101] = [0.0, 0.2081724825369588, 0.08463125323643644, -0.30971772623414096, 0.25898286035029683, 0.009372973898091079, -0.3071835272951893, 0.45106437907150304, -0.355794988565145, 0.06422673819947305, 0.2844805983647028, -0.525455044690594, 0.543791379585562, -0.32378509991570226, -0.04635785092968514, 0.41349122772143404, -0.6242290513599539, 0.5882990116897291, -0.31521872073151647, -0.08964292716169169, 0.4672464923395224, -0.668061199098541, 0.611165392156632, -0.3161853514828863, -0.10416885760196688, 0.48782482797714405, -0.686194521772878, 0.6217539122794302, -0.3181315022297296, -0.10883463947612676, 0.4955607848503133, -0.6935561523585924, 0.6264769606443558, -0.31950076415008594, -0.11023045591563022, 0.49842023945620306, -0.6965048623821606, 0.6285342703628933, -0.3202756770131871, -0.11059418179821785, 0.49945497034014463, -0.6976698259794389, 0.6294128480518887, -0.32067190806799184, -0.1106600929614165, 0.4998196415871739, -0.6981235286771286, 0.6297815508463074, -0.32086255854777307, -0.11065438425728495, 0.49994386326910023, -0.6982975812762259, 0.6299338519808819, -0.3209505636598987, -0.11063935640787678, 0.49998423500234146, -0.6983632708114029, 0.629995841576193, -0.32098995253522616, -0.11062835262338874, 0.4999964468500758, -0.6983876135858595, 0.6300207170069962, -0.3210071558361416, -0.11062202380324988, 0.49999969516300335, -0.6983964447020872, 0.630030559925036, -0.32101451775450657, -0.11061875990306608, 0.5000003244858076, -0.6983995669211734, 0.6300343993837529, -0.32101761283874763, -0.11061718084159386, 0.5000003058095835, -0.6984006349567567, 0.6300358747977863, -0.32101889346009965, -0.11061644909097712, 0.5000001907297321, -0.6984009841637866, 0.6300364326737501, -0.3210194155192463, -0.110616120594095, 0.5000001024753412, -0.698401090822338, 0.6300366398454267, -0.32101962533455025, -0.11061597677110602, 0.5000000508476371, -0.6984011197350236, 0.6300367151918089, -0.3210197084835984, -0.1106159150962407, 0.5000000239816668, -0.6984011256611038, 0.6300367419130057, -0.32101974096917446, -0.11061588911943747, 0.5000000109097329];
    const STEP_TEST_MIN_OUTPUT: f32 = 1.0000000090010657;
    const STEP_TEST_MAX_OUTPUT: f32 = 1.003622861993666;

    #[test]
    fn test() {
        let order = 5;
        println!("order {order}");
        let mut filter = butter5(0.4).unwrap();
        let out = (0..CUTOFF_TEST_INPUT.len()).map(|i| {filter.update(CUTOFF_TEST_INPUT[i])}).collect::<Vec<f32>>();

        // Check overall match to reference output to catch phase error, etc
        (0..CUTOFF_TEST_INPUT.len()).for_each(|i| { let expected = CUTOFF_TEST_OUTPUT[i]; let rel_err = (out[i] - expected).abs() / expected.abs().max(1e-4); assert!(rel_err < 0.05); });
        // Check approximate attenuation at cutoff frequency; should be -3dB or 1/sqrt(2) magnitude
        let maxmag = out.iter().fold(0.0_f32, |a, b| a.abs().max(b.abs()));
        let attenuation_rel_err = (maxmag - (libm::sqrtf(2.0) / 2.0)).abs() / (libm::sqrtf(2.0) / 2.0);
        println!("order {order} attenuation rel err {attenuation_rel_err}");
        assert!(attenuation_rel_err < 0.05);

        // Check convergence of step responses at min and max tabulated cutoff
        let mut filtermin = butter5(MIN_CUTOFF_RATIO).unwrap();
        (0..169).for_each(|_| {filtermin.update(1.0);});
        let step_min_final = filtermin.update(1.0);
        let step_min_rel_err = (step_min_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
        println!("order {order} step min rel err {step_min_rel_err}");
        assert!(step_min_rel_err < 1e-4);


    // Check response of staged filter
    let freq = 0.17;
    let mut filter_2stage = butter5_2stage(freq).unwrap();
    let mut maxmag_2stage = 0.0;
    for i in 0..99999 {
        let u = libm::sin((i as f64) * 2.0 * core::f64::consts::PI * freq) as f32;
        let v = filter_2stage.update(u);
        maxmag_2stage = v.abs().max(maxmag_2stage);
    }
    let attenuation_2stage_rel_err = (maxmag_2stage - (libm::sqrtf(2.0) / 2.0)).abs() / (libm::sqrtf(2.0) / 2.0);
    println!("order {order} attenuation 2stage rel err {attenuation_2stage_rel_err}");
    assert!(attenuation_2stage_rel_err < 0.05);

    let mut filtermin_2stage = butter5_2stage(MIN_CUTOFF_RATIO).unwrap();
    (0..99999).for_each(|_| {filtermin_2stage.update(1.0);});
    let step_min_2stage_final = filtermin_2stage.update(1.0);
    let step_min_2stage_rel_err = (step_min_2stage_final - STEP_TEST_MIN_OUTPUT).abs() / STEP_TEST_MIN_OUTPUT;
    println!("order {order} step min 2stage rel err {step_min_2stage_rel_err}");
    assert!(step_min_2stage_rel_err < 2e-4);  // 1e-4 per stage
    


                let mut filtermax = butter5(MAX_CUTOFF_RATIO).unwrap();
        (0..19).for_each(|_| {filtermax.update(1.0);});
        let step_max_final = filtermax.update(1.0);
        let step_max_rel_err = (step_max_final - STEP_TEST_MAX_OUTPUT).abs() / STEP_TEST_MAX_OUTPUT;
        println!("order {order} step max rel err {step_max_rel_err}");
        assert!(step_max_rel_err < 1e-6);
    }
}
